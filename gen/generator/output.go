package generator

import (
	"fmt"
	"io"
	"strings"
)

func Output(w io.Writer, packageName string, structs ...StructConfig) {
	fmt.Fprintf(w, `// Code generated by oscal-neo4j. DO NOT EDIT

package %s

import "github.com/mindstand/gogm/v2"

`, packageName)

	for _, s := range structs {
		outputStruct(w, s)
	}
}

func outputStruct(w io.Writer, s StructConfig) {
	outputDescription(w, s.Description, false)

	fmt.Fprintf(w, "type %s struct {\n", s.GoName)

	fmt.Fprintln(w, "	gogm.BaseNode")

	for _, p := range s.Properties {
		outputPropertyConfig(w, p)
	}

	for _, r := range s.Refs {
		outputReferenceConfig(w, r)
	}

	fmt.Fprint(w, "}\n\n")
}

func outputPropertyConfig(w io.Writer, p PropertyConfig) {
	outputDescription(w, p.Description, true)

	if p.Type == ArrayType {
		fmt.Fprintf(w, "	%s []*%s `json:\"%s\" gogm:\"direction=outgoing;relationship=has_%s\"`\n", p.GoName, p.RefStructGoName, p.Name, p.Name)
	} else if p.Type == ObjectType {
		fmt.Fprintf(w, "	%s *%s `json:\"%s\" gogm:\"direction=outgoing;relationship=has_%s\"`\n", p.GoName, p.RefStructGoName, p.Name, p.Name)
	} else {
		fmt.Fprintf(w, "	%s %s `json:\"%s\" gogm:\"name=%s\"`\n", p.GoName, p.Type, p.Name, p.Name)
	}
}

func outputReferenceConfig(w io.Writer, r ReferenceConfig) {
	fmt.Fprintf(w, "	Parent%s %s `json:\"-\" gogm:\"direction=incoming;relationship=has_%s\"`\n", r.StructGoName, r.StructGoName, r.PropertyGoName)
}

func outputDescription(w io.Writer, description string, indent bool) {
	if description == "" {
		return
	}

	lines := strings.Split(description, "\n")

	indentString := ""
	if indent {
		indentString = "	"
	}

	for _, line := range lines {
		fmt.Fprintf(w, "%s// %s\n", indentString, line)
	}
}
