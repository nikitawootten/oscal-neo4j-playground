// Code generated by oscal-neo4j. DO NOT EDIT

package schema

import "github.com/mindstand/gogm/v2"

// Identifies the source of the finding, such as a tool, interviewed person, or activity.
type AssessmentCommonOrigin struct {
	gogm.BaseNode
	Actors []*AssessmentCommonOriginActor `json:"actors" gogm:"direction=outgoing;relationship=has_actors"`
	RelatedTasks []*AssessmentCommonRelatedTask `json:"related-tasks" gogm:"direction=outgoing;relationship=has_related-tasks"`

	//Parent property relationships
	ParentAssessmentCommonObservation *AssessmentCommonObservation `json:"-" gogm:"direction=incoming;relationship=has_origins"`
	ParentAssessmentCommonResponse *AssessmentCommonResponse `json:"-" gogm:"direction=incoming;relationship=has_origins"`
	ParentAssessmentCommonRisk *AssessmentCommonRisk `json:"-" gogm:"direction=incoming;relationship=has_origins"`
	ParentArFinding *ArFinding `json:"-" gogm:"direction=incoming;relationship=has_origins"`
	ParentAssessmentCommonCharacterization *AssessmentCommonCharacterization `json:"-" gogm:"direction=incoming;relationship=has_origin"`
}

// A log of all assessment-related actions taken.
type AssessmentLog struct {
	gogm.BaseNode
	Entries []*AssessmentLogEntry `json:"entries" gogm:"direction=outgoing;relationship=has_entries"`

	//Parent property relationships
	ParentArResult *ArResult `json:"-" gogm:"direction=incoming;relationship=has_assessment-log"`
}

// Identifies a specific system privilege held by the user, along with an associated description and/or rationale for the privilege.
type ImplementationCommonAuthorizedPrivilege struct {
	gogm.BaseNode
	// A human readable name for the privilege.
	Title string `json:"title" gogm:"name=title"`
	// A summary of the privilege's purpose within the system.
	Description string `json:"description" gogm:"name=description"`
	FunctionsPerformed []string `json:"functions-performed" gogm:"name=functions-performed"`

	//Parent property relationships
	ParentImplementationCommonSystemUser *ImplementationCommonSystemUser `json:"-" gogm:"direction=incoming;relationship=has_authorized-privileges"`
}

// A reference to one or more roles with responsibility for performing a function relative to the containing object.
type MetadataResponsibleRole struct {
	gogm.BaseNode
	PartyUuids []string `json:"party-uuids" gogm:"name=party-uuids"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A human-oriented identifier reference to roles responsible for the business function.
	RoleId string `json:"role-id" gogm:"name=role-id"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`

	//Parent property relationships
	ParentControlImplementationResponsibility *ControlImplementationResponsibility `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentSspImplementedRequirement *SspImplementedRequirement `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentProvidedControlImplementation *ProvidedControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentComponentDefinitionImplementedRequirement *ComponentDefinitionImplementedRequirement `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentAssociatedActivity *AssociatedActivity `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentAssessmentCommonActivity *AssessmentCommonActivity `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentSspByComponent *SspByComponent `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentInheritedControlImplementation *InheritedControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentComponentDefinitionStatement *ComponentDefinitionStatement `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentSspStatement *SspStatement `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentImplementationCommonSystemComponent *ImplementationCommonSystemComponent `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentSatisfiedControlImplementationResponsibility *SatisfiedControlImplementationResponsibility `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentAssessmentCommonTask *AssessmentCommonTask `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
	ParentStep *Step `json:"-" gogm:"direction=incoming;relationship=has_responsible-roles"`
}

// A resource associated with content in the containing document. A resource may be directly included in the document base64 encoded or may point to one or more equivalent internet resources.
type Resource struct {
	gogm.BaseNode
	DocumentIds []*MetadataDocumentId `json:"document-ids" gogm:"direction=outgoing;relationship=has_document-ids"`
	// A citation consisting of end note text and optional structured bibliographic data.
	Citation *Citation `json:"citation" gogm:"direction=outgoing;relationship=has_citation"`
	Rlinks []*Resourcelink `json:"rlinks" gogm:"direction=outgoing;relationship=has_rlinks"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A short summary of the resource used to indicate the purpose of the resource.
	Description string `json:"description" gogm:"name=description"`
	// A name given to the resource, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	// The Base64 alphabet in RFC 2045 - aligned with XSD.
	Base64 *Base64 `json:"base64" gogm:"direction=outgoing;relationship=has_base64"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this defined resource elsewhere in this or other OSCAL instances. This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`

	//Parent property relationships
	ParentMetadataBackMatter *MetadataBackMatter `json:"-" gogm:"direction=incoming;relationship=has_resources"`
}

// Identifies the control objectives of the assessment. In the assessment plan, these are the planned objectives. In the assessment results, these are the assessed objectives, and reflects any changes from the plan.
type ReferencedControlObjectives struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A key word to indicate all.
	IncludeAll *All `json:"include-all" gogm:"direction=outgoing;relationship=has_include-all"`
	IncludeObjectives []*AssessmentCommonSelectObjectiveById `json:"include-objectives" gogm:"direction=outgoing;relationship=has_include-objectives"`
	ExcludeObjectives []*AssessmentCommonSelectObjectiveById `json:"exclude-objectives" gogm:"direction=outgoing;relationship=has_exclude-objectives"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A human-readable description of this collection of control objectives.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentAssessmentCommonReviewedControls *AssessmentCommonReviewedControls `json:"-" gogm:"direction=incoming;relationship=has_control-objective-selections"`
}

// Used to indicate that a task is dependent on another task.
type TaskDependency struct {
	gogm.BaseNode
	// A machine-oriented identifier reference to a unique task.
	TaskUuid string `json:"task-uuid" gogm:"name=task-uuid"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentAssessmentCommonTask *AssessmentCommonTask `json:"-" gogm:"direction=incoming;relationship=has_dependencies"`
}

// Describes either recommended or an actual plan for addressing the risk.
type AssessmentCommonResponse struct {
	gogm.BaseNode
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this remediation elsewhere in this or other OSCAL instances. The locally defined UUID of the risk response can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner.
	Lifecycle string `json:"lifecycle" gogm:"name=lifecycle"`
	// The title for this response activity.
	Title string `json:"title" gogm:"name=title"`
	// A human-readable description of this response plan.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Origins []*AssessmentCommonOrigin `json:"origins" gogm:"direction=outgoing;relationship=has_origins"`
	RequiredAssets []*RequiredAsset `json:"required-assets" gogm:"direction=outgoing;relationship=has_required-assets"`
	Tasks []*AssessmentCommonTask `json:"tasks" gogm:"direction=outgoing;relationship=has_tasks"`

	//Parent property relationships
	ParentAssessmentCommonRisk *AssessmentCommonRisk `json:"-" gogm:"direction=incoming;relationship=has_remediations"`
}

// Describes an individual finding.
type ArFinding struct {
	gogm.BaseNode
	// A human-readable description of this finding.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A machine-oriented identifier reference to the implementation statement in the SSP to which this finding is related.
	ImplementationStatementUuid string `json:"implementation-statement-uuid" gogm:"name=implementation-statement-uuid"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this finding in this or other OSCAL instances. The locally defined UUID of the finding can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// The title for this finding.
	Title string `json:"title" gogm:"name=title"`
	RelatedObservations []*RelatedObservation `json:"related-observations" gogm:"direction=outgoing;relationship=has_related-observations"`
	RelatedRisks []*AssociatedRisk `json:"related-risks" gogm:"direction=outgoing;relationship=has_related-risks"`
	Origins []*AssessmentCommonOrigin `json:"origins" gogm:"direction=outgoing;relationship=has_origins"`
	// Captures an assessor's conclusions regarding the degree to which an objective is satisfied.
	Target *AssessmentCommonFindingTarget `json:"target" gogm:"direction=outgoing;relationship=has_target"`

	//Parent property relationships
	ParentArResult *ArResult `json:"-" gogm:"direction=incoming;relationship=has_findings"`
}

// A reference to a set of organizations or persons that have responsibility for performing a referenced role in the context of the containing object.
type MetadataResponsibleParty struct {
	gogm.BaseNode
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A human-oriented identifier reference to roles served by the user.
	RoleId string `json:"role-id" gogm:"name=role-id"`
	PartyUuids []string `json:"party-uuids" gogm:"name=party-uuids"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`

	//Parent property relationships
	ParentSspSystemCharacteristics *SspSystemCharacteristics `json:"-" gogm:"direction=incoming;relationship=has_responsible-parties"`
	ParentImplementationCommonInventoryItem *ImplementationCommonInventoryItem `json:"-" gogm:"direction=incoming;relationship=has_responsible-parties"`
	ParentImplementedComponent *ImplementedComponent `json:"-" gogm:"direction=incoming;relationship=has_responsible-parties"`
	ParentAssessmentCommonRelatedTask *AssessmentCommonRelatedTask `json:"-" gogm:"direction=incoming;relationship=has_responsible-parties"`
	ParentMetadataMetadata *MetadataMetadata `json:"-" gogm:"direction=incoming;relationship=has_responsible-parties"`
	ParentAttestationStatements *AttestationStatements `json:"-" gogm:"direction=incoming;relationship=has_responsible-parties"`
	ParentUsesComponent *UsesComponent `json:"-" gogm:"direction=incoming;relationship=has_responsible-parties"`
}

// The actor that produces an observation, a finding, or a risk. One or more actor type can be used to specify a person that is using a tool.
type AssessmentCommonOriginActor struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// The kind of actor.
	Type string `json:"type" gogm:"name=type"`
	// A machine-oriented identifier reference to the tool or person based on the associated type.
	ActorUuid string `json:"actor-uuid" gogm:"name=actor-uuid"`
	// For a party, this can optionally be used to specify the role the actor was performing.
	RoleId string `json:"role-id" gogm:"name=role-id"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentAssessmentCommonOrigin *AssessmentCommonOrigin `json:"-" gogm:"direction=incoming;relationship=has_actors"`
	ParentOrigin *Origin `json:"-" gogm:"direction=incoming;relationship=has_actors"`
}

// Loads a component definition from another resource.
type ComponentDefinitionImportComponentDefinition struct {
	gogm.BaseNode
	// A link to a resource that defines a set of components and/or capabilities to import into this collection.
	Href string `json:"href" gogm:"name=href"`

	//Parent property relationships
	ParentComponentDefinitionComponentDefinition *ComponentDefinitionComponentDefinition `json:"-" gogm:"direction=incoming;relationship=has_import-component-definitions"`
}

// A collection of component descriptions, which may optionally be grouped by capability.
type ComponentDefinitionComponentDefinition struct {
	gogm.BaseNode
	Components []*ImplementationCommonSystemComponent `json:"components" gogm:"direction=outgoing;relationship=has_components"`
	Capabilities []*ComponentDefinitionCapability `json:"capabilities" gogm:"direction=outgoing;relationship=has_capabilities"`
	// A collection of resources, which may be included directly or by reference.
	BackMatter *MetadataBackMatter `json:"back-matter" gogm:"direction=outgoing;relationship=has_back-matter"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this component definition elsewhere in this or other OSCAL instances. The locally defined UUID of the component definition can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// Provides information about the publication and availability of the containing document.
	Metadata *MetadataMetadata `json:"metadata" gogm:"direction=outgoing;relationship=has_metadata"`
	ImportComponentDefinitions []*ComponentDefinitionImportComponentDefinition `json:"import-component-definitions" gogm:"direction=outgoing;relationship=has_import-component-definitions"`
}

// A pointer, by ID, to an externally-defined threat.
type AssessmentCommonThreatId struct {
	gogm.BaseNode
	// Specifies the source of the threat information.
	System string `json:"system" gogm:"name=system"`
	// An optional location for the threat data, from which this ID originates.
	Href string `json:"href" gogm:"name=href"`
	Id string `json:"id" gogm:"name=id"`

	//Parent property relationships
	ParentAssessmentCommonRisk *AssessmentCommonRisk `json:"-" gogm:"direction=incoming;relationship=has_threat-ids"`
}

// Use the flat structuring method.
type Flat struct {
	gogm.BaseNode

	//Parent property relationships
	ParentProfileMerge *ProfileMerge `json:"-" gogm:"direction=incoming;relationship=has_flat"`
}

// A system security plan, such as those described in NIST SP 800-18
type SspSystemSecurityPlan struct {
	gogm.BaseNode
	// Contains the characteristics of the system, such as its name, purpose, and security impact level.
	SystemCharacteristics *SspSystemCharacteristics `json:"system-characteristics" gogm:"direction=outgoing;relationship=has_system-characteristics"`
	// Provides information as to how the system is implemented.
	SystemImplementation *SspSystemImplementation `json:"system-implementation" gogm:"direction=outgoing;relationship=has_system-implementation"`
	// Describes how the system satisfies a set of controls.
	ControlImplementation *SspControlImplementation `json:"control-implementation" gogm:"direction=outgoing;relationship=has_control-implementation"`
	// A collection of resources, which may be included directly or by reference.
	BackMatter *MetadataBackMatter `json:"back-matter" gogm:"direction=outgoing;relationship=has_back-matter"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this system security plan (SSP) elsewhere in this or other OSCAL instances. The locally defined UUID of the SSP can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance).This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// Provides information about the publication and availability of the containing document.
	Metadata *MetadataMetadata `json:"metadata" gogm:"direction=outgoing;relationship=has_metadata"`
	// Used to import the OSCAL profile representing the system's control baseline.
	ImportProfile *SspImportProfile `json:"import-profile" gogm:"direction=outgoing;relationship=has_import-profile"`
}

// Describes a capability which may be inherited by a leveraging system.
type ProvidedControlImplementation struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this provided entry elsewhere in this or other OSCAL instances. The locally defined UUID of the provided entry can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// An implementation statement that describes the aspects of the control or control statement implementation that can be provided to another system leveraging this system.
	Description string `json:"description" gogm:"name=description"`

	//Parent property relationships
	ParentExport *Export `json:"-" gogm:"direction=incoming;relationship=has_provided"`
}

// Identifies the source of the finding, such as a tool or person.
type Origin struct {
	gogm.BaseNode
	Actors []*AssessmentCommonOriginActor `json:"actors" gogm:"direction=outgoing;relationship=has_actors"`

	//Parent property relationships
	ParentPoamPoamItem *PoamPoamItem `json:"-" gogm:"direction=incoming;relationship=has_origins"`
}

// A location, with associated metadata that can be referenced.
type MetadataLocation struct {
	gogm.BaseNode
	Urls []string `json:"urls" gogm:"name=urls"`
	// A name given to the location, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	// A postal address for the location.
	Address *MetadataAddress `json:"address" gogm:"direction=outgoing;relationship=has_address"`
	EmailAddresses []string `json:"email-addresses" gogm:"name=email-addresses"`
	TelephoneNumbers []*MetadataTelephoneNumber `json:"telephone-numbers" gogm:"direction=outgoing;relationship=has_telephone-numbers"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this defined location elsewhere in this or other OSCAL instances. The locally defined UUID of the location can be used to reference the data item locally or globally (e.g., from an importing OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentMetadataMetadata *MetadataMetadata `json:"-" gogm:"direction=incoming;relationship=has_locations"`
}

// Used to represent the toolset used to perform aspects of the assessment.
type AssessmentPlatform struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	UsesComponents []*UsesComponent `json:"uses-components" gogm:"direction=outgoing;relationship=has_uses-components"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this assessment platform elsewhere in this or other OSCAL instances. The locally defined UUID of the assessment platform can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// The title or name for the assessment platform.
	Title string `json:"title" gogm:"name=title"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentAssessmentCommonAssessmentAssets *AssessmentCommonAssessmentAssets `json:"-" gogm:"direction=incoming;relationship=has_assessment-platforms"`
}

// Describes the operational status of the system component.
type Status struct {
	gogm.BaseNode
	// The operational status.
	State string `json:"state" gogm:"name=state"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentImplementationCommonSystemComponent *ImplementationCommonSystemComponent `json:"-" gogm:"direction=incoming;relationship=has_status"`
}

// The Base64 alphabet in RFC 2045 - aligned with XSD.
type Base64 struct {
	gogm.BaseNode
	// Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.
	Filename string `json:"filename" gogm:"name=filename"`
	// Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
	MediaType string `json:"media-type" gogm:"name=media-type"`
	Value string `json:"value" gogm:"name=value"`

	//Parent property relationships
	ParentResource *Resource `json:"-" gogm:"direction=incoming;relationship=has_base64"`
}

// Identifies the result of an action and/or task that occurred as part of executing an assessment plan or an assessment event that occurred in producing the assessment results.
type AssessmentLogEntry struct {
	gogm.BaseNode
	// A human-readable description of this event.
	Description string `json:"description" gogm:"name=description"`
	// Identifies the start date and time of an event.
	Start string `json:"start" gogm:"name=start"`
	LoggedBy []*AssessmentCommonLoggedBy `json:"logged-by" gogm:"direction=outgoing;relationship=has_logged-by"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference an assessment event in this or other OSCAL instances. The locally defined UUID of the assessment log entry can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// The title for this event.
	Title string `json:"title" gogm:"name=title"`
	// Identifies the end date and time of an event. If the event is a point in time, the start and end will be the same date and time.
	End string `json:"end" gogm:"name=end"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	RelatedTasks []*AssessmentCommonRelatedTask `json:"related-tasks" gogm:"direction=outgoing;relationship=has_related-tasks"`

	//Parent property relationships
	ParentAssessmentLog *AssessmentLog `json:"-" gogm:"direction=incoming;relationship=has_entries"`
}

// Identifies an individual risk response that occurred as part of managing an identified risk.
type RiskLogEntry struct {
	gogm.BaseNode
	// Identifies the start date and time of the event.
	Start string `json:"start" gogm:"name=start"`
	// Identifies the end date and time of the event. If the event is a point in time, the start and end will be the same date and time.
	End string `json:"end" gogm:"name=end"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	LoggedBy []*AssessmentCommonLoggedBy `json:"logged-by" gogm:"direction=outgoing;relationship=has_logged-by"`
	RelatedResponses []*RiskResponseReference `json:"related-responses" gogm:"direction=outgoing;relationship=has_related-responses"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this risk log entry elsewhere in this or other OSCAL instances. The locally defined UUID of the risk log entry can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// The title for this risk log entry.
	Title string `json:"title" gogm:"name=title"`
	// A human-readable description of what was done regarding the risk.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	// Describes the status of the associated risk.
	StatusChange string `json:"status-change" gogm:"name=status-change"`

	//Parent property relationships
	ParentRiskLog *RiskLog `json:"-" gogm:"direction=incoming;relationship=has_entries"`
}

// A collection of controls.
type CatalogCatalog struct {
	gogm.BaseNode
	// A collection of resources, which may be included directly or by reference.
	BackMatter *MetadataBackMatter `json:"back-matter" gogm:"direction=outgoing;relationship=has_back-matter"`
	// A globally unique identifier with cross-instance scope for this catalog instance. This UUID should be changed when this document is revised.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// Provides information about the publication and availability of the containing document.
	Metadata *MetadataMetadata `json:"metadata" gogm:"direction=outgoing;relationship=has_metadata"`
	Params []*CatalogCommonParameter `json:"params" gogm:"direction=outgoing;relationship=has_params"`
	Controls []*CatalogControl `json:"controls" gogm:"direction=outgoing;relationship=has_controls"`
	Groups []*CatalogGroup `json:"groups" gogm:"direction=outgoing;relationship=has_groups"`
}

// A Combine element defines whether and how to combine multiple (competing) versions of the same control
type Combinationrule struct {
	gogm.BaseNode
	// How clashing controls should be handled
	Method string `json:"method" gogm:"name=method"`

	//Parent property relationships
	ParentProfileMerge *ProfileMerge `json:"-" gogm:"direction=incoming;relationship=has_combine"`
}

// Contains the characteristics of the system, such as its name, purpose, and security impact level.
type SspSystemCharacteristics struct {
	gogm.BaseNode
	// Describes the operational status of the system.
	Status *SspStatus `json:"status" gogm:"direction=outgoing;relationship=has_status"`
	// A description of the system's network architecture, optionally supplemented by diagrams that illustrate the network architecture.
	NetworkArchitecture *SspNetworkArchitecture `json:"network-architecture" gogm:"direction=outgoing;relationship=has_network-architecture"`
	// A description of the logical flow of information within the system and across its boundaries, optionally supplemented by diagrams that illustrate these flows.
	DataFlow *SspDataFlow `json:"data-flow" gogm:"direction=outgoing;relationship=has_data-flow"`
	// The date the system received its authorization.
	DateAuthorized string `json:"date-authorized" gogm:"name=date-authorized"`
	// The overall information system sensitivity categorization, such as defined by FIPS-199.
	SecuritySensitivityLevel string `json:"security-sensitivity-level" gogm:"name=security-sensitivity-level"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// The overall level of expected impact resulting from unauthorized disclosure, modification, or loss of access to information.
	SecurityImpactLevel *SspSecurityImpactLevel `json:"security-impact-level" gogm:"direction=outgoing;relationship=has_security-impact-level"`
	// A description of this system's authorization boundary, optionally supplemented by diagrams that illustrate the authorization boundary.
	AuthorizationBoundary *SspAuthorizationBoundary `json:"authorization-boundary" gogm:"direction=outgoing;relationship=has_authorization-boundary"`
	ResponsibleParties []*MetadataResponsibleParty `json:"responsible-parties" gogm:"direction=outgoing;relationship=has_responsible-parties"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// The full name of the system.
	SystemName string `json:"system-name" gogm:"name=system-name"`
	// A summary of the system.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	// Contains details about all information types that are stored, processed, or transmitted by the system, such as privacy information, and those defined in NIST SP 800-60.
	SystemInformation *SspSystemInformation `json:"system-information" gogm:"direction=outgoing;relationship=has_system-information"`
	SystemIds []*ImplementationCommonSystemId `json:"system-ids" gogm:"direction=outgoing;relationship=has_system-ids"`
	// A short name for the system, such as an acronym, that is suitable for display in a data table or summary list.
	SystemNameShort string `json:"system-name-short" gogm:"name=system-name-short"`

	//Parent property relationships
	ParentSspSystemSecurityPlan *SspSystemSecurityPlan `json:"-" gogm:"direction=incoming;relationship=has_system-characteristics"`
}

// Identifies the controls being assessed and their control objectives.
type AssessmentCommonReviewedControls struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	ControlSelections []*AssessedControls `json:"control-selections" gogm:"direction=outgoing;relationship=has_control-selections"`
	ControlObjectiveSelections []*ReferencedControlObjectives `json:"control-objective-selections" gogm:"direction=outgoing;relationship=has_control-objective-selections"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A human-readable description of control objectives.
	Description string `json:"description" gogm:"name=description"`

	//Parent property relationships
	ParentArResult *ArResult `json:"-" gogm:"direction=incoming;relationship=has_reviewed-controls"`
	ParentApAssessmentPlan *ApAssessmentPlan `json:"-" gogm:"direction=incoming;relationship=has_reviewed-controls"`
	ParentStep *Step `json:"-" gogm:"direction=incoming;relationship=has_reviewed-controls"`
	ParentAssessmentCommonActivity *AssessmentCommonActivity `json:"-" gogm:"direction=incoming;relationship=has_related-controls"`
}

// Information about the protocol used to provide a service.
type ImplementationCommonProtocol struct {
	gogm.BaseNode
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this service protocol information elsewhere in this or other OSCAL instances. The locally defined UUID of the service protocol can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// The common name of the protocol, which should be the appropriate "service name" from the IANA Service Name and Transport Protocol Port Number Registry.
	Name string `json:"name" gogm:"name=name"`
	// A human readable name for the protocol (e.g., Transport Layer Security).
	Title string `json:"title" gogm:"name=title"`
	PortRanges []*ImplementationCommonPortRange `json:"port-ranges" gogm:"direction=outgoing;relationship=has_port-ranges"`

	//Parent property relationships
	ParentImplementationCommonSystemComponent *ImplementationCommonSystemComponent `json:"-" gogm:"direction=incoming;relationship=has_protocols"`
}

// A key word to indicate all.
type All struct {
	gogm.BaseNode

	//Parent property relationships
	ParentAssessmentCommonAssessmentSubject *AssessmentCommonAssessmentSubject `json:"-" gogm:"direction=incoming;relationship=has_include-all"`
	ParentAssessedControls *AssessedControls `json:"-" gogm:"direction=incoming;relationship=has_include-all"`
	ParentReferencedControlObjectives *ReferencedControlObjectives `json:"-" gogm:"direction=incoming;relationship=has_include-all"`
}

// TBD
type ComponentDefinitionIncorporatesComponent struct {
	gogm.BaseNode
	// A machine-oriented identifier reference to a component.
	ComponentUuid string `json:"component-uuid" gogm:"name=component-uuid"`
	// A description of the component, including information about its function.
	Description string `json:"description" gogm:"name=description"`

	//Parent property relationships
	ParentComponentDefinitionCapability *ComponentDefinitionCapability `json:"-" gogm:"direction=incoming;relationship=has_incorporates-components"`
}

// Contact number by telephone.
type MetadataTelephoneNumber struct {
	gogm.BaseNode
	Number string `json:"number" gogm:"name=number"`
	// Indicates the type of phone number.
	Type string `json:"type" gogm:"name=type"`

	//Parent property relationships
	ParentMetadataLocation *MetadataLocation `json:"-" gogm:"direction=incoming;relationship=has_telephone-numbers"`
	ParentMetadataParty *MetadataParty `json:"-" gogm:"direction=incoming;relationship=has_telephone-numbers"`
}

// Insert all controls from the imported catalog or profile resources identified in the import directive.
type ProfileIncludeAll struct {
	gogm.BaseNode

	//Parent property relationships
	ParentProfileInsertControls *ProfileInsertControls `json:"-" gogm:"direction=incoming;relationship=has_include-all"`
	ParentProfileImport *ProfileImport `json:"-" gogm:"direction=incoming;relationship=has_include-all"`
}

// Used by assessment-results to import information about the original plan for assessing the system.
type ArImportAp struct {
	gogm.BaseNode
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// >A resolvable URL reference to the assessment plan governing the assessment activities.
	Href string `json:"href" gogm:"name=href"`

	//Parent property relationships
	ParentArAssessmentResults *ArAssessmentResults `json:"-" gogm:"direction=incoming;relationship=has_import-ap"`
}

// Identifies the controls being assessed. In the assessment plan, these are the planned controls. In the assessment results, these are the actual controls, and reflects any changes from the plan.
type AssessedControls struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A key word to indicate all.
	IncludeAll *All `json:"include-all" gogm:"direction=outgoing;relationship=has_include-all"`
	IncludeControls []*AssessmentCommonSelectControlById `json:"include-controls" gogm:"direction=outgoing;relationship=has_include-controls"`
	ExcludeControls []*AssessmentCommonSelectControlById `json:"exclude-controls" gogm:"direction=outgoing;relationship=has_exclude-controls"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A human-readable description of in-scope controls specified for assessment.
	Description string `json:"description" gogm:"name=description"`

	//Parent property relationships
	ParentAssessmentCommonReviewedControls *AssessmentCommonReviewedControls `json:"-" gogm:"direction=incoming;relationship=has_control-selections"`
}

// Security assessment results, such as those provided by a FedRAMP assessor in the FedRAMP Security Assessment Report.
type ArAssessmentResults struct {
	gogm.BaseNode
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this assessment results instance in this or other OSCAL instances. The locally defined UUID of the assessment result can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// Provides information about the publication and availability of the containing document.
	Metadata *MetadataMetadata `json:"metadata" gogm:"direction=outgoing;relationship=has_metadata"`
	// Used by assessment-results to import information about the original plan for assessing the system.
	ImportAp *ArImportAp `json:"import-ap" gogm:"direction=outgoing;relationship=has_import-ap"`
	// Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.
	LocalDefinitions *LocalDefinitions `json:"local-definitions" gogm:"direction=outgoing;relationship=has_local-definitions"`
	Results []*ArResult `json:"results" gogm:"direction=outgoing;relationship=has_results"`
	// A collection of resources, which may be included directly or by reference.
	BackMatter *MetadataBackMatter `json:"back-matter" gogm:"direction=outgoing;relationship=has_back-matter"`
}

// Specifies contents to be added into controls, in resolution
type ProfileAdd struct {
	gogm.BaseNode
	// Target location of the addition.
	ById string `json:"by-id" gogm:"name=by-id"`
	// A name given to the control, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	Params []*CatalogCommonParameter `json:"params" gogm:"direction=outgoing;relationship=has_params"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Parts []*CatalogCommonPart `json:"parts" gogm:"direction=outgoing;relationship=has_parts"`
	// Where to add the new content with respect to the targeted element (beside it or inside it)
	Position string `json:"position" gogm:"name=position"`

	//Parent property relationships
	ParentProfileAlter *ProfileAlter `json:"-" gogm:"direction=incoming;relationship=has_adds"`
}

// An entry in a sequential list of revisions to the containing document in reverse chronological order (i.e., most recent previous revision first).
type MetadataRevision struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A name given to the document revision, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	// The date and time the document was published. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
	Published string `json:"published" gogm:"name=published"`
	// The date and time the document was last modified. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
	LastModified string `json:"last-modified" gogm:"name=last-modified"`
	// A string used to distinguish the current version of the document from other previous (and future) versions.
	Version string `json:"version" gogm:"name=version"`
	// The OSCAL model version the document was authored against.
	OscalVersion string `json:"oscal-version" gogm:"name=oscal-version"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentMetadataMetadata *MetadataMetadata `json:"-" gogm:"direction=incoming;relationship=has_revisions"`
}

// Identifies the assets used to perform this assessment, such as the assessment team, scanning tools, and assumptions.
type AssessmentCommonAssessmentAssets struct {
	gogm.BaseNode
	Components []*ImplementationCommonSystemComponent `json:"components" gogm:"direction=outgoing;relationship=has_components"`
	AssessmentPlatforms []*AssessmentPlatform `json:"assessment-platforms" gogm:"direction=outgoing;relationship=has_assessment-platforms"`

	//Parent property relationships
	ParentLocalDefinitions *LocalDefinitions `json:"-" gogm:"direction=incoming;relationship=has_assessment-assets"`
	ParentApAssessmentPlan *ApAssessmentPlan `json:"-" gogm:"direction=incoming;relationship=has_assessment-assets"`
}

// Where applicable this is the IPv4 port range on which the service operates.
type ImplementationCommonPortRange struct {
	gogm.BaseNode
	// Indicates the starting port number in a port range
	Start int `json:"start" gogm:"name=start"`
	// Indicates the ending port number in a port range
	End int `json:"end" gogm:"name=end"`
	// Indicates the transport type.
	Transport string `json:"transport" gogm:"name=transport"`

	//Parent property relationships
	ParentImplementationCommonProtocol *ImplementationCommonProtocol `json:"-" gogm:"direction=incoming;relationship=has_port-ranges"`
}

// Describes an individual observation.
type AssessmentCommonObservation struct {
	gogm.BaseNode
	// A human-readable description of this assessment observation.
	Description string `json:"description" gogm:"name=description"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Methods []string `json:"methods" gogm:"name=methods"`
	Origins []*AssessmentCommonOrigin `json:"origins" gogm:"direction=outgoing;relationship=has_origins"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this observation elsewhere in this or other OSCAL instances. The locally defined UUID of the observation can be used to reference the data item locally or globally (e.g., in an imorted OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// The title for this observation.
	Title string `json:"title" gogm:"name=title"`
	Subjects []*AssessmentCommonSubjectReference `json:"subjects" gogm:"direction=outgoing;relationship=has_subjects"`
	RelevantEvidence []*RelevantEvidence `json:"relevant-evidence" gogm:"direction=outgoing;relationship=has_relevant-evidence"`
	// Date/time stamp identifying when the finding information was collected.
	Collected string `json:"collected" gogm:"name=collected"`
	// Date/time identifying when the finding information is out-of-date and no longer valid. Typically used with continuous assessment scenarios.
	Expires string `json:"expires" gogm:"name=expires"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Types []string `json:"types" gogm:"name=types"`

	//Parent property relationships
	ParentArResult *ArResult `json:"-" gogm:"direction=incoming;relationship=has_observations"`
	ParentPoamPlanOfActionAndMilestones *PoamPlanOfActionAndMilestones `json:"-" gogm:"direction=incoming;relationship=has_observations"`
}

// The timing under which the task is intended to occur.
type EventTiming struct {
	gogm.BaseNode
	// The task is intended to occur on the specified date.
	OnDate *OnDateCondition `json:"on-date" gogm:"direction=outgoing;relationship=has_on-date"`
	// The task is intended to occur within the specified date range.
	WithinDateRange *OnDateRangeCondition `json:"within-date-range" gogm:"direction=outgoing;relationship=has_within-date-range"`
	// The task is intended to occur at the specified frequency.
	AtFrequency *FrequencyCondition `json:"at-frequency" gogm:"direction=outgoing;relationship=has_at-frequency"`

	//Parent property relationships
	ParentAssessmentCommonTask *AssessmentCommonTask `json:"-" gogm:"direction=incoming;relationship=has_timing"`
}

// Identifies an individual activity to be performed as part of a task.
type AssociatedActivity struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	Subjects []*AssessmentCommonAssessmentSubject `json:"subjects" gogm:"direction=outgoing;relationship=has_subjects"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented identifier reference to an activity defined in the list of activities.
	ActivityUuid string `json:"activity-uuid" gogm:"name=activity-uuid"`

	//Parent property relationships
	ParentAssessmentCommonTask *AssessmentCommonTask `json:"-" gogm:"direction=incoming;relationship=has_associated-activities"`
}

// Represents a scheduled event or milestone, which may be associated with a series of assessment actions.
type AssessmentCommonTask struct {
	gogm.BaseNode
	Dependencies []*TaskDependency `json:"dependencies" gogm:"direction=outgoing;relationship=has_dependencies"`
	Tasks []*AssessmentCommonTask `json:"tasks" gogm:"direction=outgoing;relationship=has_tasks"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// The timing under which the task is intended to occur.
	Timing *EventTiming `json:"timing" gogm:"direction=outgoing;relationship=has_timing"`
	AssociatedActivities []*AssociatedActivity `json:"associated-activities" gogm:"direction=outgoing;relationship=has_associated-activities"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this task elsewhere in this or other OSCAL instances. The locally defined UUID of the task can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// The type of task.
	Type string `json:"type" gogm:"name=type"`
	// The title for this task.
	Title string `json:"title" gogm:"name=title"`
	// A human-readable description of this task.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Subjects []*AssessmentCommonAssessmentSubject `json:"subjects" gogm:"direction=outgoing;relationship=has_subjects"`
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`

	//Parent property relationships
	ParentAssessmentCommonTask *AssessmentCommonTask `json:"-" gogm:"direction=incoming;relationship=has_tasks"`
	ParentAssessmentCommonResponse *AssessmentCommonResponse `json:"-" gogm:"direction=incoming;relationship=has_tasks"`
	ParentLocalDefinitions *LocalDefinitions `json:"-" gogm:"direction=incoming;relationship=has_tasks"`
	ParentApAssessmentPlan *ApAssessmentPlan `json:"-" gogm:"direction=incoming;relationship=has_tasks"`
}

// The set of components that are used by the assessment platform.
type UsesComponent struct {
	gogm.BaseNode
	// A machine-oriented identifier reference to a component that is implemented as part of an inventory item.
	ComponentUuid string `json:"component-uuid" gogm:"name=component-uuid"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	ResponsibleParties []*MetadataResponsibleParty `json:"responsible-parties" gogm:"direction=outgoing;relationship=has_responsible-parties"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentAssessmentPlatform *AssessmentPlatform `json:"-" gogm:"direction=incoming;relationship=has_uses-components"`
}

// Presenting a choice among alternatives
type CatalogCommonParameterSelection struct {
	gogm.BaseNode
	// Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.
	HowMany string `json:"how-many" gogm:"name=how-many"`
	Choice []string `json:"choice" gogm:"name=choice"`

	//Parent property relationships
	ParentCatalogCommonParameter *CatalogCommonParameter `json:"-" gogm:"direction=incoming;relationship=has_select"`
	ParentParameterSetting *ParameterSetting `json:"-" gogm:"direction=incoming;relationship=has_select"`
}

// The expected level of impact resulting from the disruption of access to or use of the described information or the information system.
type AvailabilityImpactLevel struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// The prescribed base (Confidentiality, Integrity, or Availability) security impact level.
	Base string `json:"base" gogm:"name=base"`
	// The selected (Confidentiality, Integrity, or Availability) security impact level.
	Selected string `json:"selected" gogm:"name=selected"`
	// If the selected security level is different from the base security level, this contains the justification for the change.
	AdjustmentJustification string `json:"adjustment-justification" gogm:"name=adjustment-justification"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentInformationType *InformationType `json:"-" gogm:"direction=incoming;relationship=has_availability-impact"`
}

// A parameter setting, to be propagated to points of insertion
type ParameterSetting struct {
	gogm.BaseNode
	Constraints []*CatalogCommonParameterConstraint `json:"constraints" gogm:"direction=outgoing;relationship=has_constraints"`
	Values []string `json:"values" gogm:"name=values"`
	// Presenting a choice among alternatives
	Select *CatalogCommonParameterSelection `json:"select" gogm:"direction=outgoing;relationship=has_select"`
	// A human-oriented, locally unique identifier with cross-instance scope that can be used to reference this defined parameter elsewhere in this or other OSCAL instances. When referenced from another OSCAL instance, this identifier must be referenced in the context of the containing resource (e.g., import-profile). This id should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	ParamId string `json:"param-id" gogm:"name=param-id"`
	// **(deprecated)** Another parameter invoking this one. This construct has been deprecated and should not be used.
	DependsOn string `json:"depends-on" gogm:"name=depends-on"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.
	Label string `json:"label" gogm:"name=label"`
	// Describes the purpose and use of a parameter
	Usage string `json:"usage" gogm:"name=usage"`
	// A textual label that provides a characterization of the parameter.
	Class string `json:"class" gogm:"name=class"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Guidelines []*CatalogCommonParameterGuideline `json:"guidelines" gogm:"direction=outgoing;relationship=has_guidelines"`

	//Parent property relationships
	ParentProfileModify *ProfileModify `json:"-" gogm:"direction=incoming;relationship=has_set-parameters"`
}

// Identifies an assessment or related process that can be performed. In the assessment plan, this is an intended activity which may be associated with an assessment task. In the assessment results, this an activity that was actually performed as part of an assessment.
type AssessmentCommonActivity struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Steps []*Step `json:"steps" gogm:"direction=outgoing;relationship=has_steps"`
	// Identifies the controls being assessed and their control objectives.
	RelatedControls *AssessmentCommonReviewedControls `json:"related-controls" gogm:"direction=outgoing;relationship=has_related-controls"`
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	// A machine-oriented, globally unique> identifier with cross-instance scope that can be used to reference this assessment activity elsewhere in this or other OSCAL instances. The locally defined UUID of the activity can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// The title for this included activity.
	Title string `json:"title" gogm:"name=title"`
	// A human-readable description of this included activity.
	Description string `json:"description" gogm:"name=description"`
}

// Identifies a set of assessment subjects to include/exclude by UUID.
type AssessmentCommonSelectSubjectById struct {
	gogm.BaseNode
	// Used to indicate the type of object pointed to by the uuid-ref within a subject.
	Type string `json:"type" gogm:"name=type"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented identifier reference to a component, inventory-item, location, party, user, or resource using it's UUID.
	SubjectUuid string `json:"subject-uuid" gogm:"name=subject-uuid"`

	//Parent property relationships
	ParentAssessmentCommonAssessmentSubject *AssessmentCommonAssessmentSubject `json:"-" gogm:"direction=incoming;relationship=has_include-subjects"`
	ParentAssessmentCommonAssessmentSubject1 *AssessmentCommonAssessmentSubject `json:"-" gogm:"direction=incoming;relationship=has_exclude-subjects"`
}

// Relates the finding to a set of referenced risks that were used to determine the finding.
type AssociatedRisk struct {
	gogm.BaseNode
	// A machine-oriented identifier reference to a risk defined in the list of risks.
	RiskUuid string `json:"risk-uuid" gogm:"name=risk-uuid"`

	//Parent property relationships
	ParentPoamPoamItem *PoamPoamItem `json:"-" gogm:"direction=incoming;relationship=has_related-risks"`
	ParentArFinding *ArFinding `json:"-" gogm:"direction=incoming;relationship=has_related-risks"`
}

// A collection of resources, which may be included directly or by reference.
type MetadataBackMatter struct {
	gogm.BaseNode
	Resources []*Resource `json:"resources" gogm:"direction=outgoing;relationship=has_resources"`

	//Parent property relationships
	ParentComponentDefinitionComponentDefinition *ComponentDefinitionComponentDefinition `json:"-" gogm:"direction=incoming;relationship=has_back-matter"`
	ParentCatalogCatalog *CatalogCatalog `json:"-" gogm:"direction=incoming;relationship=has_back-matter"`
	ParentProfileProfile *ProfileProfile `json:"-" gogm:"direction=incoming;relationship=has_back-matter"`
	ParentApAssessmentPlan *ApAssessmentPlan `json:"-" gogm:"direction=incoming;relationship=has_back-matter"`
	ParentArAssessmentResults *ArAssessmentResults `json:"-" gogm:"direction=incoming;relationship=has_back-matter"`
	ParentSspSystemSecurityPlan *SspSystemSecurityPlan `json:"-" gogm:"direction=incoming;relationship=has_back-matter"`
	ParentPoamPlanOfActionAndMilestones *PoamPlanOfActionAndMilestones `json:"-" gogm:"direction=incoming;relationship=has_back-matter"`
}

// Used to select a control for inclusion/exclusion based on one or more control identifiers. A set of statement identifiers can be used to target the inclusion/exclusion to only specific control statements providing more granularity over the specific statements that are within the asessment scope.
type AssessmentCommonSelectControlById struct {
	gogm.BaseNode
	// A human-oriented identifier reference to a control with a corresponding id value. When referencing an externally defined control, the Control Identifier Reference must be used in the context of the external / imported OSCAL instance (e.g., uri-reference).
	ControlId string `json:"control-id" gogm:"name=control-id"`
	StatementIds []string `json:"statement-ids" gogm:"name=statement-ids"`

	//Parent property relationships
	ParentAssessedControls *AssessedControls `json:"-" gogm:"direction=incoming;relationship=has_include-controls"`
	ParentAssessedControls1 *AssessedControls `json:"-" gogm:"direction=incoming;relationship=has_exclude-controls"`
}

// Links this observation to relevant evidence.
type RelevantEvidence struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// >A resolvable URL reference to relevant evidence.
	Href string `json:"href" gogm:"name=href"`
	// A human-readable description of this evidence.
	Description string `json:"description" gogm:"name=description"`

	//Parent property relationships
	ParentAssessmentCommonObservation *AssessmentCommonObservation `json:"-" gogm:"direction=incoming;relationship=has_relevant-evidence"`
}

// Set parameters or amend controls in resolution
type ProfileModify struct {
	gogm.BaseNode
	SetParameters []*ParameterSetting `json:"set-parameters" gogm:"direction=outgoing;relationship=has_set-parameters"`
	Alters []*ProfileAlter `json:"alters" gogm:"direction=outgoing;relationship=has_alters"`

	//Parent property relationships
	ParentProfileProfile *ProfileProfile `json:"-" gogm:"direction=incoming;relationship=has_modify"`
}

// Describes how the system satisfies an individual control.
type SspImplementedRequirement struct {
	gogm.BaseNode
	ByComponents []*SspByComponent `json:"by-components" gogm:"direction=outgoing;relationship=has_by-components"`
	// A human-oriented identifier reference to a control with a corresponding id value. When referencing an externally defined control, the Control Identifier Reference must be used in the context of the external / imported OSCAL instance (e.g., uri-reference).
	ControlId string `json:"control-id" gogm:"name=control-id"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	SetParameters []*ImplementationCommonSetParameter `json:"set-parameters" gogm:"direction=outgoing;relationship=has_set-parameters"`
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	Statements []*SspStatement `json:"statements" gogm:"direction=outgoing;relationship=has_statements"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this control requirement elsewhere in this or other OSCAL instances. The locally defined UUID of the control requirement can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`

	//Parent property relationships
	ParentSspControlImplementation *SspControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_implemented-requirements"`
}

// Specifies which controls to use in the containing context.
type ProfileInsertControls struct {
	gogm.BaseNode
	// A designation of how a selection of controls in a profile is to be ordered.
	Order string `json:"order" gogm:"name=order"`
	// Insert all controls from the imported catalog or profile resources identified in the import directive.
	IncludeAll *ProfileIncludeAll `json:"include-all" gogm:"direction=outgoing;relationship=has_include-all"`
	IncludeControls []*ProfileSelectControlById `json:"include-controls" gogm:"direction=outgoing;relationship=has_include-controls"`
	ExcludeControls []*ProfileSelectControlById `json:"exclude-controls" gogm:"direction=outgoing;relationship=has_exclude-controls"`

	//Parent property relationships
	ParentProfileGroup *ProfileGroup `json:"-" gogm:"direction=incoming;relationship=has_insert-controls"`
	ParentCustomgrouping *Customgrouping `json:"-" gogm:"direction=incoming;relationship=has_insert-controls"`
}

// A responsible entity which is either a person or an organization.
type MetadataParty struct {
	gogm.BaseNode
	EmailAddresses []string `json:"email-addresses" gogm:"name=email-addresses"`
	TelephoneNumbers []*MetadataTelephoneNumber `json:"telephone-numbers" gogm:"direction=outgoing;relationship=has_telephone-numbers"`
	LocationUuids []string `json:"location-uuids" gogm:"name=location-uuids"`
	// A category describing the kind of party the object describes.
	Type string `json:"type" gogm:"name=type"`
	// The full name of the party. This is typically the legal name associated with the party.
	Name string `json:"name" gogm:"name=name"`
	// A short common name, abbreviation, or acronym for the party.
	ShortName string `json:"short-name" gogm:"name=short-name"`
	ExternalIds []*PartyExternalIdentifier `json:"external-ids" gogm:"direction=outgoing;relationship=has_external-ids"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	MemberOfOrganizations []string `json:"member-of-organizations" gogm:"name=member-of-organizations"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this defined party elsewhere in this or other OSCAL instances. The locally defined UUID of the party can be used to reference the data item locally or globally (e.g., from an importing OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Addresses []*MetadataAddress `json:"addresses" gogm:"direction=outgoing;relationship=has_addresses"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentMetadataMetadata *MetadataMetadata `json:"-" gogm:"direction=incoming;relationship=has_parties"`
}

// The overall level of expected impact resulting from unauthorized disclosure, modification, or loss of access to information.
type SspSecurityImpactLevel struct {
	gogm.BaseNode
	// A target-level of confidentiality for the system, based on the sensitivity of information within the system.
	SecurityObjectiveConfidentiality string `json:"security-objective-confidentiality" gogm:"name=security-objective-confidentiality"`
	// A target-level of integrity for the system, based on the sensitivity of information within the system.
	SecurityObjectiveIntegrity string `json:"security-objective-integrity" gogm:"name=security-objective-integrity"`
	// A target-level of availability for the system, based on the sensitivity of information within the system.
	SecurityObjectiveAvailability string `json:"security-objective-availability" gogm:"name=security-objective-availability"`

	//Parent property relationships
	ParentSspSystemCharacteristics *SspSystemCharacteristics `json:"-" gogm:"direction=incoming;relationship=has_security-impact-level"`
}

// A description of the logical flow of information within the system and across its boundaries, optionally supplemented by diagrams that illustrate these flows.
type SspDataFlow struct {
	gogm.BaseNode
	// A summary of the system's data flow.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Diagrams []*SspDiagram `json:"diagrams" gogm:"direction=outgoing;relationship=has_diagrams"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentSspSystemCharacteristics *SspSystemCharacteristics `json:"-" gogm:"direction=incoming;relationship=has_data-flow"`
}

// The expected level of impact resulting from the unauthorized disclosure of the described information.
type ConfidentialityImpactLevel struct {
	gogm.BaseNode
	// The prescribed base (Confidentiality, Integrity, or Availability) security impact level.
	Base string `json:"base" gogm:"name=base"`
	// The selected (Confidentiality, Integrity, or Availability) security impact level.
	Selected string `json:"selected" gogm:"name=selected"`
	// If the selected security level is different from the base security level, this contains the justification for the change.
	AdjustmentJustification string `json:"adjustment-justification" gogm:"name=adjustment-justification"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`

	//Parent property relationships
	ParentInformationType *InformationType `json:"-" gogm:"direction=incoming;relationship=has_confidentiality-impact"`
}

// An individual characteristic that is part of a larger set produced by the same actor.
type Facet struct {
	gogm.BaseNode
	// Specifies the naming system under which this risk metric is organized, which allows for the same names to be used in different systems controlled by different parties. This avoids the potential of a name clash.
	System string `json:"system" gogm:"name=system"`
	// Indicates the value of the facet.
	Value string `json:"value" gogm:"name=value"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// The name of the risk metric within the specified system.
	Name string `json:"name" gogm:"name=name"`

	//Parent property relationships
	ParentAssessmentCommonCharacterization *AssessmentCommonCharacterization `json:"-" gogm:"direction=incoming;relationship=has_facets"`
}

// Used to indicate who created a log entry in what role.
type AssessmentCommonLoggedBy struct {
	gogm.BaseNode
	// A machine-oriented identifier reference to the party who is making the log entry.
	PartyUuid string `json:"party-uuid" gogm:"name=party-uuid"`
	// A point to the role-id of the role in which the party is making the log entry.
	RoleId string `json:"role-id" gogm:"name=role-id"`

	//Parent property relationships
	ParentAssessmentLogEntry *AssessmentLogEntry `json:"-" gogm:"direction=incoming;relationship=has_logged-by"`
	ParentRiskLogEntry *RiskLogEntry `json:"-" gogm:"direction=incoming;relationship=has_logged-by"`
}

// The task is intended to occur at the specified frequency.
type FrequencyCondition struct {
	gogm.BaseNode
	// The task must occur after the specified period has elapsed.
	Period int `json:"period" gogm:"name=period"`
	// The unit of time for the period.
	Unit string `json:"unit" gogm:"name=unit"`

	//Parent property relationships
	ParentEventTiming *EventTiming `json:"-" gogm:"direction=incoming;relationship=has_at-frequency"`
}

// Specifies objects to be removed from a control based on specific aspects of the object that must all match.
type ProfileRemove struct {
	gogm.BaseNode
	// Identify items to remove by matching their class.
	ByClass string `json:"by-class" gogm:"name=by-class"`
	// Identify items to remove indicated by their id.
	ById string `json:"by-id" gogm:"name=by-id"`
	// Identify items to remove by the name of the item's information element name, e.g. title or prop
	ByItemName string `json:"by-item-name" gogm:"name=by-item-name"`
	// Identify items to remove by the item's ns, which is the namespace associated with a part, or prop.
	ByNs string `json:"by-ns" gogm:"name=by-ns"`
	// Identify items to remove by matching their assigned name
	ByName string `json:"by-name" gogm:"name=by-name"`

	//Parent property relationships
	ParentProfileAlter *ProfileAlter `json:"-" gogm:"direction=incoming;relationship=has_removes"`
}

// Identifies the parameter that will be set by the enclosed value.
type ImplementationCommonSetParameter struct {
	gogm.BaseNode
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A human-oriented reference to a parameter within a control, who's catalog has been imported into the current implementation context.
	ParamId string `json:"param-id" gogm:"name=param-id"`
	Values []string `json:"values" gogm:"name=values"`

	//Parent property relationships
	ParentSspByComponent *SspByComponent `json:"-" gogm:"direction=incoming;relationship=has_set-parameters"`
	ParentComponentDefinitionControlImplementation *ComponentDefinitionControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_set-parameters"`
	ParentComponentDefinitionImplementedRequirement *ComponentDefinitionImplementedRequirement `json:"-" gogm:"direction=incoming;relationship=has_set-parameters"`
	ParentSspControlImplementation *SspControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_set-parameters"`
	ParentSspImplementedRequirement *SspImplementedRequirement `json:"-" gogm:"direction=incoming;relationship=has_set-parameters"`
}

// A description of this system's authorization boundary, optionally supplemented by diagrams that illustrate the authorization boundary.
type SspAuthorizationBoundary struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Diagrams []*SspDiagram `json:"diagrams" gogm:"direction=outgoing;relationship=has_diagrams"`
	// Commentary about the system's authorization boundary that enhances the diagram.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A summary of the system's authorization boundary.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentSspSystemCharacteristics *SspSystemCharacteristics `json:"-" gogm:"direction=incoming;relationship=has_authorization-boundary"`
}

// A partition of an assessment plan or results or a child of another part.
type AssessmentCommonAssessmentPart struct {
	gogm.BaseNode
	// A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.
	Ns string `json:"ns" gogm:"name=ns"`
	// A textual label that provides a sub-type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.
	Class string `json:"class" gogm:"name=class"`
	// A name given to the part, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this part elsewhere in this or other OSCAL instances. The locally defined UUID of the part can be used to reference the data item locally or globally (e.g., in an ported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A textual label that uniquely identifies the part's semantic type.
	Name string `json:"name" gogm:"name=name"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	// Permits multiple paragraphs, lists, tables etc.
	Prose string `json:"prose" gogm:"name=prose"`
	Parts []*AssessmentCommonAssessmentPart `json:"parts" gogm:"direction=outgoing;relationship=has_parts"`

	//Parent property relationships
	ParentAssessmentCommonAssessmentPart *AssessmentCommonAssessmentPart `json:"-" gogm:"direction=incoming;relationship=has_parts"`
	ParentAssessmentCommonAssessmentMethod *AssessmentCommonAssessmentMethod `json:"-" gogm:"direction=incoming;relationship=has_part"`
	ParentAttestationStatements *AttestationStatements `json:"-" gogm:"direction=incoming;relationship=has_parts"`
	ParentAssessmentPlanTermsandConditions *AssessmentPlanTermsandConditions `json:"-" gogm:"direction=incoming;relationship=has_parts"`
}

// Used to select a control objective for inclusion/exclusion based on the control objective's identifier.
type AssessmentCommonSelectObjectiveById struct {
	gogm.BaseNode
	// Points to an assessment objective.
	ObjectiveId string `json:"objective-id" gogm:"name=objective-id"`

	//Parent property relationships
	ParentReferencedControlObjectives *ReferencedControlObjectives `json:"-" gogm:"direction=incoming;relationship=has_exclude-objectives"`
	ParentReferencedControlObjectives1 *ReferencedControlObjectives `json:"-" gogm:"direction=incoming;relationship=has_include-objectives"`
}

// A log of all risk-related tasks taken.
type RiskLog struct {
	gogm.BaseNode
	Entries []*RiskLogEntry `json:"entries" gogm:"direction=outgoing;relationship=has_entries"`

	//Parent property relationships
	ParentAssessmentCommonRisk *AssessmentCommonRisk `json:"-" gogm:"direction=incoming;relationship=has_risk-log"`
}

// Identifies an asset required to achieve remediation.
type RequiredAsset struct {
	gogm.BaseNode
	Subjects []*AssessmentCommonSubjectReference `json:"subjects" gogm:"direction=outgoing;relationship=has_subjects"`
	// The title for this required asset.
	Title string `json:"title" gogm:"name=title"`
	// A human-readable description of this required asset.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this required asset elsewhere in this or other OSCAL instances. The locally defined UUID of the asset can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`

	//Parent property relationships
	ParentAssessmentCommonResponse *AssessmentCommonResponse `json:"-" gogm:"direction=incoming;relationship=has_required-assets"`
}

// A group of (selected) controls or of groups of controls
type ProfileGroup struct {
	gogm.BaseNode
	// A human-oriented, locally unique identifier with cross-instance scope that can be used to reference this defined group elsewhere in this or other OSCAL instances. When referenced from another OSCAL instance, this identifier must be referenced in the context of the containing resource (e.g., import-profile). This id should be assigned per-subject, which means it should be consistently used to identify the same group across revisions of the document.
	Id string `json:"id" gogm:"name=id"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Parts []*CatalogCommonPart `json:"parts" gogm:"direction=outgoing;relationship=has_parts"`
	Groups []*ProfileGroup `json:"groups" gogm:"direction=outgoing;relationship=has_groups"`
	InsertControls []*ProfileInsertControls `json:"insert-controls" gogm:"direction=outgoing;relationship=has_insert-controls"`
	// A textual label that provides a sub-type or characterization of the group.
	Class string `json:"class" gogm:"name=class"`
	// A name given to the group, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	Params []*CatalogCommonParameter `json:"params" gogm:"direction=outgoing;relationship=has_params"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`

	//Parent property relationships
	ParentProfileGroup *ProfileGroup `json:"-" gogm:"direction=incoming;relationship=has_groups"`
	ParentCustomgrouping *Customgrouping `json:"-" gogm:"direction=incoming;relationship=has_groups"`
}

// Used by the assessment results and POA&M. In the assessment results, this identifies all of the assessment observations and findings, initial and residual risks, deviations, and disposition. In the POA&M, this identifies initial and residual risks, deviations, and disposition.
type ArResult struct {
	gogm.BaseNode
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this set of results in this or other OSCAL instances. The locally defined UUID of the assessment result can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// The title for this set of results.
	Title string `json:"title" gogm:"name=title"`
	Prop []*MetadataProperty `json:"prop" gogm:"direction=outgoing;relationship=has_prop"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// Date/time stamp identifying the end of the evidence collection reflected in these results. In a continuous motoring scenario, this may contain the same value as start if appropriate.
	End string `json:"end" gogm:"name=end"`
	Attestations []*AttestationStatements `json:"attestations" gogm:"direction=outgoing;relationship=has_attestations"`
	// A log of all assessment-related actions taken.
	AssessmentLog *AssessmentLog `json:"assessment-log" gogm:"direction=outgoing;relationship=has_assessment-log"`
	Observations []*AssessmentCommonObservation `json:"observations" gogm:"direction=outgoing;relationship=has_observations"`
	// A human-readable description of this set of test results.
	Description string `json:"description" gogm:"name=description"`
	// Date/time stamp identifying the start of the evidence collection reflected in these results.
	Start string `json:"start" gogm:"name=start"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Risks []*AssessmentCommonRisk `json:"risks" gogm:"direction=outgoing;relationship=has_risks"`
	Findings []*ArFinding `json:"findings" gogm:"direction=outgoing;relationship=has_findings"`
	// Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.
	LocalDefinitions *LocalDefinitions `json:"local-definitions" gogm:"direction=outgoing;relationship=has_local-definitions"`
	// Identifies the controls being assessed and their control objectives.
	ReviewedControls *AssessmentCommonReviewedControls `json:"reviewed-controls" gogm:"direction=outgoing;relationship=has_reviewed-controls"`

	//Parent property relationships
	ParentArAssessmentResults *ArAssessmentResults `json:"-" gogm:"direction=incoming;relationship=has_results"`
}

// A defined component that can be part of an implemented system.
type ImplementationCommonSystemComponent struct {
	gogm.BaseNode
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A description of the component, including information about its function.
	Description string `json:"description" gogm:"name=description"`
	// A summary of the technological or business purpose of the component.
	Purpose string `json:"purpose" gogm:"name=purpose"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	// Describes the operational status of the system component.
	Status *Status `json:"status" gogm:"direction=outgoing;relationship=has_status"`
	Protocols []*ImplementationCommonProtocol `json:"protocols" gogm:"direction=outgoing;relationship=has_protocols"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this component elsewhere in this or other OSCAL instances. The locally defined UUID of the component can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A category describing the purpose of the component.
	Type string `json:"type" gogm:"name=type"`
	// A human readable name for the system component.
	Title string `json:"title" gogm:"name=title"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`

	//Parent property relationships
	ParentSspSystemImplementation *SspSystemImplementation `json:"-" gogm:"direction=incoming;relationship=has_components"`
	ParentComponentDefinitionComponentDefinition *ComponentDefinitionComponentDefinition `json:"-" gogm:"direction=incoming;relationship=has_components"`
	ParentAssessmentCommonAssessmentAssets *AssessmentCommonAssessmentAssets `json:"-" gogm:"direction=incoming;relationship=has_components"`
	ParentLocalDefinitions *LocalDefinitions `json:"-" gogm:"direction=incoming;relationship=has_components"`
	ParentPoamLocalDefinitions *PoamLocalDefinitions `json:"-" gogm:"direction=incoming;relationship=has_components"`
}

// Defines how the referenced component implements a set of controls.
type SspByComponent struct {
	gogm.BaseNode
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this by-component entry elsewhere in this or other OSCAL instances. The locally defined UUID of the by-component entry can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	SetParameters []*ImplementationCommonSetParameter `json:"set-parameters" gogm:"direction=outgoing;relationship=has_set-parameters"`
	// Identifies content intended for external consumption, such as with leveraged organizations.
	Export *Export `json:"export" gogm:"direction=outgoing;relationship=has_export"`
	Satisfied []*SatisfiedControlImplementationResponsibility `json:"satisfied" gogm:"direction=outgoing;relationship=has_satisfied"`
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	// A machine-oriented identifier reference to the component that is implemeting a given control.
	ComponentUuid string `json:"component-uuid" gogm:"name=component-uuid"`
	// An implementation statement that describes how a control or a control statement is implemented within the referenced system component.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	// Indicates the degree to which the a given control is implemented.
	ImplementationStatus *ImplementationCommonImplementationStatus `json:"implementation-status" gogm:"direction=outgoing;relationship=has_implementation-status"`
	Inherited []*InheritedControlImplementation `json:"inherited" gogm:"direction=outgoing;relationship=has_inherited"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentSspStatement *SspStatement `json:"-" gogm:"direction=incoming;relationship=has_by-components"`
	ParentSspImplementedRequirement *SspImplementedRequirement `json:"-" gogm:"direction=incoming;relationship=has_by-components"`
}

// A representation of a cryptographic digest generated over a resource using a specified hash algorithm.
type MetadataHash struct {
	gogm.BaseNode
	// Method by which a hash is derived
	Algorithm string `json:"algorithm" gogm:"name=algorithm"`
	Value string `json:"value" gogm:"name=value"`

	//Parent property relationships
	ParentResourcelink *Resourcelink `json:"-" gogm:"direction=incoming;relationship=has_hashes"`
}

// A postal address for the location.
type MetadataAddress struct {
	gogm.BaseNode
	// Indicates the type of address.
	Type string `json:"type" gogm:"name=type"`
	AddrLines []string `json:"addr-lines" gogm:"name=addr-lines"`
	// City, town or geographical region for the mailing address.
	City string `json:"city" gogm:"name=city"`
	// State, province or analogous geographical region for mailing address
	State string `json:"state" gogm:"name=state"`
	// Postal or ZIP code for mailing address
	PostalCode string `json:"postal-code" gogm:"name=postal-code"`
	// The ISO 3166-1 alpha-2 country code for the mailing address.
	Country string `json:"country" gogm:"name=country"`

	//Parent property relationships
	ParentMetadataLocation *MetadataLocation `json:"-" gogm:"direction=incoming;relationship=has_address"`
	ParentMetadataParty *MetadataParty `json:"-" gogm:"direction=incoming;relationship=has_addresses"`
}

// Assessment subjects will be identified while conducting the referenced activity-instance.
type AssessmentSubjectSource struct {
	gogm.BaseNode
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference (in this or other OSCAL instances) an assessment activity to be performed as part of the event. The locally defined UUID of the task can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	TaskUuid string `json:"task-uuid" gogm:"name=task-uuid"`

	//Parent property relationships
	ParentAssessmentCommonAssessmentSubjectPlaceholder *AssessmentCommonAssessmentSubjectPlaceholder `json:"-" gogm:"direction=incoming;relationship=has_sources"`
}

// Allows components, and inventory-items to be defined within the POA&M for circumstances where no OSCAL-based SSP exists, or is not delivered with the POA&M.
type PoamLocalDefinitions struct {
	gogm.BaseNode
	Components []*ImplementationCommonSystemComponent `json:"components" gogm:"direction=outgoing;relationship=has_components"`
	InventoryItems []*ImplementationCommonInventoryItem `json:"inventory-items" gogm:"direction=outgoing;relationship=has_inventory-items"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentPoamPlanOfActionAndMilestones *PoamPlanOfActionAndMilestones `json:"-" gogm:"direction=incoming;relationship=has_local-definitions"`
}

// Describes how this system satisfies a responsibility imposed by a leveraged system.
type SatisfiedControlImplementationResponsibility struct {
	gogm.BaseNode
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this satisfied control implementation entry elsewhere in this or other OSCAL instances. The locally defined UUID of the control implementation can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A machine-oriented identifier reference to a control implementation that satisfies a responsibility imposed by a leveraged system.
	ResponsibilityUuid string `json:"responsibility-uuid" gogm:"name=responsibility-uuid"`
	// An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is implementing based on a requirement from a leveraged system.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`

	//Parent property relationships
	ParentSspByComponent *SspByComponent `json:"-" gogm:"direction=incoming;relationship=has_satisfied"`
}

// Defines how the component or capability supports a set of controls.
type ComponentDefinitionControlImplementation struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	SetParameters []*ImplementationCommonSetParameter `json:"set-parameters" gogm:"direction=outgoing;relationship=has_set-parameters"`
	ImplementedRequirements []*ComponentDefinitionImplementedRequirement `json:"implemented-requirements" gogm:"direction=outgoing;relationship=has_implemented-requirements"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference a set of implemented controls elsewhere in this or other OSCAL instances. The locally defined UUID of the control implementation set can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition.
	Source string `json:"source" gogm:"name=source"`
	// A description of how the specified set of controls are implemented for the containing component or capability.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentComponentDefinitionCapability *ComponentDefinitionCapability `json:"-" gogm:"direction=incoming;relationship=has_control-implementations"`
}

// A grouping of other components and/or capabilities.
type ComponentDefinitionCapability struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	IncorporatesComponents []*ComponentDefinitionIncorporatesComponent `json:"incorporates-components" gogm:"direction=outgoing;relationship=has_incorporates-components"`
	ControlImplementations []*ComponentDefinitionControlImplementation `json:"control-implementations" gogm:"direction=outgoing;relationship=has_control-implementations"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this capability elsewhere in this or other OSCAL instances. The locally defined UUID of the capability can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance).This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// The capability's human-readable name.
	Name string `json:"name" gogm:"name=name"`
	// A summary of the capability.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentComponentDefinitionComponentDefinition *ComponentDefinitionComponentDefinition `json:"-" gogm:"direction=incoming;relationship=has_capabilities"`
}

// A structured information object representing a security or privacy control. Each security or privacy control within the Catalog is defined by a distinct control instance.
type CatalogControl struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Parts []*CatalogCommonPart `json:"parts" gogm:"direction=outgoing;relationship=has_parts"`
	Controls []*CatalogControl `json:"controls" gogm:"direction=outgoing;relationship=has_controls"`
	// A human-oriented, locally unique identifier with instance scope that can be used to reference this control elsewhere in this and other OSCAL instances (e.g., profiles). This id should be assigned per-subject, which means it should be consistently used to identify the same control across revisions of the document.
	Id string `json:"id" gogm:"name=id"`
	// A textual label that provides a sub-type or characterization of the control.
	Class string `json:"class" gogm:"name=class"`
	// A name given to the control, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	Params []*CatalogCommonParameter `json:"params" gogm:"direction=outgoing;relationship=has_params"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentCatalogControl *CatalogControl `json:"-" gogm:"direction=incoming;relationship=has_controls"`
	ParentCatalogGroup *CatalogGroup `json:"-" gogm:"direction=incoming;relationship=has_controls"`
	ParentCatalogCatalog *CatalogCatalog `json:"-" gogm:"direction=incoming;relationship=has_controls"`
}

// Used by the assessment plan and POA&M to import information about the system.
type AssessmentCommonImportSsp struct {
	gogm.BaseNode
	// >A resolvable URL reference to the system security plan for the system being assessed.
	Href string `json:"href" gogm:"name=href"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentApAssessmentPlan *ApAssessmentPlan `json:"-" gogm:"direction=incoming;relationship=has_import-ssp"`
	ParentPoamPlanOfActionAndMilestones *PoamPlanOfActionAndMilestones `json:"-" gogm:"direction=incoming;relationship=has_import-ssp"`
}

// Identifies an individual step in a series of steps related to an activity, such as an assessment test or examination procedure.
type Step struct {
	gogm.BaseNode
	// The title for this step.
	Title string `json:"title" gogm:"name=title"`
	// A human-readable description of this step.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Identifies the controls being assessed and their control objectives.
	ReviewedControls *AssessmentCommonReviewedControls `json:"reviewed-controls" gogm:"direction=outgoing;relationship=has_reviewed-controls"`
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this step elsewhere in this or other OSCAL instances. The locally defined UUID of the step (in a series of steps) can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`

	//Parent property relationships
	ParentAssessmentCommonActivity *AssessmentCommonActivity `json:"-" gogm:"direction=incoming;relationship=has_steps"`
}

// The import designates a catalog, profile, or other resource to be included (referenced and potentially modified) by this profile. The import also identifies which controls to select using the include-all, include-controls, and exclude-controls directives.
type ProfileImport struct {
	gogm.BaseNode
	ExcludeControls []*ProfileSelectControlById `json:"exclude-controls" gogm:"direction=outgoing;relationship=has_exclude-controls"`
	// A resolvable URL reference to the base catalog or profile that this profile is tailoring.
	Href string `json:"href" gogm:"name=href"`
	// Insert all controls from the imported catalog or profile resources identified in the import directive.
	IncludeAll *ProfileIncludeAll `json:"include-all" gogm:"direction=outgoing;relationship=has_include-all"`
	IncludeControls []*ProfileSelectControlById `json:"include-controls" gogm:"direction=outgoing;relationship=has_include-controls"`

	//Parent property relationships
	ParentProfileProfile *ProfileProfile `json:"-" gogm:"direction=incoming;relationship=has_imports"`
}

// An Alter element specifies changes to be made to an included control when a profile is resolved.
type ProfileAlter struct {
	gogm.BaseNode
	// A human-oriented identifier reference to a control with a corresponding id value. When referencing an externally defined control, the Control Identifier Reference must be used in the context of the external / imported OSCAL instance (e.g., uri-reference).
	ControlId string `json:"control-id" gogm:"name=control-id"`
	Removes []*ProfileRemove `json:"removes" gogm:"direction=outgoing;relationship=has_removes"`
	Adds []*ProfileAdd `json:"adds" gogm:"direction=outgoing;relationship=has_adds"`

	//Parent property relationships
	ParentProfileModify *ProfileModify `json:"-" gogm:"direction=incoming;relationship=has_alters"`
}

// Indicates the degree to which the a given control is implemented.
type ImplementationCommonImplementationStatus struct {
	gogm.BaseNode
	// Identifies the implementation status of the control or control objective.
	State string `json:"state" gogm:"name=state"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentSspByComponent *SspByComponent `json:"-" gogm:"direction=incoming;relationship=has_implementation-status"`
	ParentAssessmentCommonFindingTarget *AssessmentCommonFindingTarget `json:"-" gogm:"direction=incoming;relationship=has_implementation-status"`
}

// Used to detail assessment subjects that were identfied by this task.
type IdentifiedSubject struct {
	gogm.BaseNode
	// A machine-oriented identifier reference to a unique assessment subject placeholder defined by this task.
	SubjectPlaceholderUuid string `json:"subject-placeholder-uuid" gogm:"name=subject-placeholder-uuid"`
	Subjects []*AssessmentCommonAssessmentSubject `json:"subjects" gogm:"direction=outgoing;relationship=has_subjects"`

	//Parent property relationships
	ParentAssessmentCommonRelatedTask *AssessmentCommonRelatedTask `json:"-" gogm:"direction=incoming;relationship=has_identified-subject"`
}

// A collection of descriptive data about the containing object from a specific origin.
type AssessmentCommonCharacterization struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Identifies the source of the finding, such as a tool, interviewed person, or activity.
	Origin *AssessmentCommonOrigin `json:"origin" gogm:"direction=outgoing;relationship=has_origin"`
	Facets []*Facet `json:"facets" gogm:"direction=outgoing;relationship=has_facets"`

	//Parent property relationships
	ParentAssessmentCommonRisk *AssessmentCommonRisk `json:"-" gogm:"direction=incoming;relationship=has_characterizations"`
}

// A human-oriented, globally unique identifier with cross-instance scope that can be used to reference this system identification property elsewhere in this or other OSCAL instances. When referencing an externally defined system identification, the system identification must be used in the context of the external / imported OSCAL instance (e.g., uri-reference). This string should be assigned per-subject, which means it should be consistently used to identify the same system across revisions of the document.
type ImplementationCommonSystemId struct {
	gogm.BaseNode
	Id string `json:"id" gogm:"name=id"`
	// Identifies the identification system from which the provided identifier was assigned.
	IdentifierType string `json:"identifier-type" gogm:"name=identifier-type"`

	//Parent property relationships
	ParentSspSystemCharacteristics *SspSystemCharacteristics `json:"-" gogm:"direction=incoming;relationship=has_system-ids"`
	ParentPoamPlanOfActionAndMilestones *PoamPlanOfActionAndMilestones `json:"-" gogm:"direction=incoming;relationship=has_system-id"`
}

// Describes an individual POA&M item.
type PoamPoamItem struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	RelatedRisks []*AssociatedRisk `json:"related-risks" gogm:"direction=outgoing;relationship=has_related-risks"`
	// The title or name for this POA&M item .
	Title string `json:"title" gogm:"name=title"`
	// A human-readable description of POA&M item.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with instance scope that can be used to reference this POA&M item entry in this OSCAL instance. This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	Origins []*Origin `json:"origins" gogm:"direction=outgoing;relationship=has_origins"`
	RelatedObservations []*RelatedObservation `json:"related-observations" gogm:"direction=outgoing;relationship=has_related-observations"`

	//Parent property relationships
	ParentPoamPlanOfActionAndMilestones *PoamPlanOfActionAndMilestones `json:"-" gogm:"direction=incoming;relationship=has_poam-items"`
}

// Describes an existing mitigating factor that may affect the overall determination of the risk, with an optional link to an implementation statement in the SSP.
type MitigatingFactor struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Subjects []*AssessmentCommonSubjectReference `json:"subjects" gogm:"direction=outgoing;relationship=has_subjects"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this mitigating factor elsewhere in this or other OSCAL instances. The locally defined UUID of the mitigating factor can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this implementation statement elsewhere in this or other OSCAL instancess. The locally defined UUID of the implementation statement can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	ImplementationUuid string `json:"implementation-uuid" gogm:"name=implementation-uuid"`
	// A human-readable description of this mitigating factor.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentAssessmentCommonRisk *AssessmentCommonRisk `json:"-" gogm:"direction=incoming;relationship=has_mitigating-factors"`
}

// Each OSCAL profile is defined by a Profile element
type ProfileProfile struct {
	gogm.BaseNode
	Imports []*ProfileImport `json:"imports" gogm:"direction=outgoing;relationship=has_imports"`
	// A Merge element provides structuring directives that drive how controls are organized after resolution.
	Merge *ProfileMerge `json:"merge" gogm:"direction=outgoing;relationship=has_merge"`
	// Set parameters or amend controls in resolution
	Modify *ProfileModify `json:"modify" gogm:"direction=outgoing;relationship=has_modify"`
	// A collection of resources, which may be included directly or by reference.
	BackMatter *MetadataBackMatter `json:"back-matter" gogm:"direction=outgoing;relationship=has_back-matter"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this profile elsewhere in this or other OSCAL instances. The locally defined UUID of the profile can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance).This identifier should be assigned per-subject, which means it should be consistently used to identify the same profile across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// Provides information about the publication and availability of the containing document.
	Metadata *MetadataMetadata `json:"metadata" gogm:"direction=outgoing;relationship=has_metadata"`
}

// Contains details about all information types that are stored, processed, or transmitted by the system, such as privacy information, and those defined in NIST SP 800-60.
type SspSystemInformation struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	InformationTypes []*InformationType `json:"information-types" gogm:"direction=outgoing;relationship=has_information-types"`

	//Parent property relationships
	ParentSspSystemCharacteristics *SspSystemCharacteristics `json:"-" gogm:"direction=incoming;relationship=has_system-information"`
}

// Describes a control implementation responsibility imposed on a leveraging system.
type ControlImplementationResponsibility struct {
	gogm.BaseNode
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this responsibility elsewhere in this or other OSCAL instances. The locally defined UUID of the responsibility can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A machine-oriented identifier reference to an inherited control implementation that a leveraging system is inheriting from a leveraged system.
	ProvidedUuid string `json:"provided-uuid" gogm:"name=provided-uuid"`
	// An implementation statement that describes the aspects of the control or control statement implementation that a leveraging system must implement to satisfy the control provided by a leveraged system.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentExport *Export `json:"-" gogm:"direction=incoming;relationship=has_responsibilities"`
}

// A group of controls, or of groups of controls.
type CatalogGroup struct {
	gogm.BaseNode
	Params []*CatalogCommonParameter `json:"params" gogm:"direction=outgoing;relationship=has_params"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Groups []*CatalogGroup `json:"groups" gogm:"direction=outgoing;relationship=has_groups"`
	// A human-oriented, locally unique identifier with cross-instance scope that can be used to reference this defined group elsewhere in in this and other OSCAL instances (e.g., profiles). This id should be assigned per-subject, which means it should be consistently used to identify the same group across revisions of the document.
	Id string `json:"id" gogm:"name=id"`
	// A name given to the group, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Parts []*CatalogCommonPart `json:"parts" gogm:"direction=outgoing;relationship=has_parts"`
	Controls []*CatalogControl `json:"controls" gogm:"direction=outgoing;relationship=has_controls"`
	// A textual label that provides a sub-type or characterization of the group.
	Class string `json:"class" gogm:"name=class"`

	//Parent property relationships
	ParentCatalogGroup *CatalogGroup `json:"-" gogm:"direction=incoming;relationship=has_groups"`
	ParentCatalogCatalog *CatalogCatalog `json:"-" gogm:"direction=incoming;relationship=has_groups"`
}

// A pointer to an external resource with an optional hash for verification and change detection.
type Resourcelink struct {
	gogm.BaseNode
	// A resolvable URI reference to a resource.
	Href string `json:"href" gogm:"name=href"`
	// Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
	MediaType string `json:"media-type" gogm:"name=media-type"`
	Hashes []*MetadataHash `json:"hashes" gogm:"direction=outgoing;relationship=has_hashes"`

	//Parent property relationships
	ParentResource *Resource `json:"-" gogm:"direction=incoming;relationship=has_rlinks"`
}

// Provides information about the publication and availability of the containing document.
type MetadataMetadata struct {
	gogm.BaseNode
	// A name given to the document, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	// The date and time the document was last modified. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
	LastModified string `json:"last-modified" gogm:"name=last-modified"`
	Revisions []*MetadataRevision `json:"revisions" gogm:"direction=outgoing;relationship=has_revisions"`
	Locations []*MetadataLocation `json:"locations" gogm:"direction=outgoing;relationship=has_locations"`
	Parties []*MetadataParty `json:"parties" gogm:"direction=outgoing;relationship=has_parties"`
	DocumentIds []*MetadataDocumentId `json:"document-ids" gogm:"direction=outgoing;relationship=has_document-ids"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// The date and time the document was published. The date-time value must be formatted according to RFC 3339 with full time and time zone included.
	Published string `json:"published" gogm:"name=published"`
	// A string used to distinguish the current version of the document from other previous (and future) versions.
	Version string `json:"version" gogm:"name=version"`
	// The OSCAL model version the document was authored against.
	OscalVersion string `json:"oscal-version" gogm:"name=oscal-version"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	ResponsibleParties []*MetadataResponsibleParty `json:"responsible-parties" gogm:"direction=outgoing;relationship=has_responsible-parties"`
	Roles []*MetadataRole `json:"roles" gogm:"direction=outgoing;relationship=has_roles"`

	//Parent property relationships
	ParentApAssessmentPlan *ApAssessmentPlan `json:"-" gogm:"direction=incoming;relationship=has_metadata"`
	ParentArAssessmentResults *ArAssessmentResults `json:"-" gogm:"direction=incoming;relationship=has_metadata"`
	ParentSspSystemSecurityPlan *SspSystemSecurityPlan `json:"-" gogm:"direction=incoming;relationship=has_metadata"`
	ParentPoamPlanOfActionAndMilestones *PoamPlanOfActionAndMilestones `json:"-" gogm:"direction=incoming;relationship=has_metadata"`
	ParentComponentDefinitionComponentDefinition *ComponentDefinitionComponentDefinition `json:"-" gogm:"direction=incoming;relationship=has_metadata"`
	ParentCatalogCatalog *CatalogCatalog `json:"-" gogm:"direction=incoming;relationship=has_metadata"`
	ParentProfileProfile *ProfileProfile `json:"-" gogm:"direction=incoming;relationship=has_metadata"`
}

// Used when the assessment subjects will be determined as part of one or more other assessment activities. These assessment subjects will be recorded in the assessment results in the assessment log.
type AssessmentCommonAssessmentSubjectPlaceholder struct {
	gogm.BaseNode
	// A machine-oriented, globally unique identifier for a set of assessment subjects that will be identified by a task or an activity that is part of a task. The locally defined UUID of the assessment subject placeholder can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A human-readable description of intent of this assessment subject placeholder.
	Description string `json:"description" gogm:"name=description"`
	Sources []*AssessmentSubjectSource `json:"sources" gogm:"direction=outgoing;relationship=has_sources"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
}

// Describes the operational status of the system.
type SspStatus struct {
	gogm.BaseNode
	// The current operating status.
	State string `json:"state" gogm:"name=state"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentSspSystemCharacteristics *SspSystemCharacteristics `json:"-" gogm:"direction=incoming;relationship=has_status"`
}

// Select controls by (regular expression) match on ID
type MatchControlsbyPattern struct {
	gogm.BaseNode
	// A glob expression matching the IDs of one or more controls to be selected.
	Pattern string `json:"pattern" gogm:"name=pattern"`

	//Parent property relationships
	ParentProfileSelectControlById *ProfileSelectControlById `json:"-" gogm:"direction=incoming;relationship=has_matching"`
}

// A formal or informal expression of a constraint or test
type CatalogCommonParameterConstraint struct {
	gogm.BaseNode
	Tests []*ConstraintTest `json:"tests" gogm:"direction=outgoing;relationship=has_tests"`
	// A textual summary of the constraint to be applied.
	Description string `json:"description" gogm:"name=description"`

	//Parent property relationships
	ParentCatalogCommonParameter *CatalogCommonParameter `json:"-" gogm:"direction=incoming;relationship=has_constraints"`
	ParentParameterSetting *ParameterSetting `json:"-" gogm:"direction=incoming;relationship=has_constraints"`
}

// Call a control by its ID
type ProfileSelectControlById struct {
	gogm.BaseNode
	// When a control is included, whether its child (dependent) controls are also included.
	WithChildControls string `json:"with-child-controls" gogm:"name=with-child-controls"`
	WithIds []string `json:"with-ids" gogm:"name=with-ids"`
	Matching []*MatchControlsbyPattern `json:"matching" gogm:"direction=outgoing;relationship=has_matching"`

	//Parent property relationships
	ParentProfileInsertControls *ProfileInsertControls `json:"-" gogm:"direction=incoming;relationship=has_exclude-controls"`
	ParentProfileInsertControls1 *ProfileInsertControls `json:"-" gogm:"direction=incoming;relationship=has_include-controls"`
	ParentProfileImport *ProfileImport `json:"-" gogm:"direction=incoming;relationship=has_exclude-controls"`
	ParentProfileImport1 *ProfileImport `json:"-" gogm:"direction=incoming;relationship=has_include-controls"`
}

// Contains details about one information type that is stored, processed, or transmitted by the system, such as privacy information, and those defined in NIST SP 800-60.
type InformationType struct {
	gogm.BaseNode
	// The expected level of impact resulting from the unauthorized disclosure of the described information.
	ConfidentialityImpact *ConfidentialityImpactLevel `json:"confidentiality-impact" gogm:"direction=outgoing;relationship=has_confidentiality-impact"`
	// The expected level of impact resulting from the disruption of access to or use of the described information or the information system.
	AvailabilityImpact *AvailabilityImpactLevel `json:"availability-impact" gogm:"direction=outgoing;relationship=has_availability-impact"`
	Categorizations []*InformationTypeCategorization `json:"categorizations" gogm:"direction=outgoing;relationship=has_categorizations"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// The expected level of impact resulting from the unauthorized modification of the described information.
	IntegrityImpact *IntegrityImpactLevel `json:"integrity-impact" gogm:"direction=outgoing;relationship=has_integrity-impact"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this information type elsewhere in this or other OSCAL instances. The locally defined UUID of the information type can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A human readable name for the information type. This title should be meaningful within the context of the system.
	Title string `json:"title" gogm:"name=title"`
	// A summary of how this information type is used within the system.
	Description string `json:"description" gogm:"name=description"`

	//Parent property relationships
	ParentSspSystemInformation *SspSystemInformation `json:"-" gogm:"direction=incoming;relationship=has_information-types"`
}

// A human-oriented identifier reference to a resource. Use type to indicate whether the identified resource is a component, inventory item, location, user, or something else.
type AssessmentCommonSubjectReference struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented identifier reference to a component, inventory-item, location, party, user, or resource using it's UUID.
	SubjectUuid string `json:"subject-uuid" gogm:"name=subject-uuid"`
	// Used to indicate the type of object pointed to by the uuid-ref within a subject.
	Type string `json:"type" gogm:"name=type"`
	// The title or name for the referenced subject.
	Title string `json:"title" gogm:"name=title"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentAssessmentCommonObservation *AssessmentCommonObservation `json:"-" gogm:"direction=incoming;relationship=has_subjects"`
	ParentMitigatingFactor *MitigatingFactor `json:"-" gogm:"direction=incoming;relationship=has_subjects"`
	ParentRequiredAsset *RequiredAsset `json:"-" gogm:"direction=incoming;relationship=has_subjects"`
}

// A Merge element provides structuring directives that drive how controls are organized after resolution.
type ProfileMerge struct {
	gogm.BaseNode
	// Use the flat structuring method.
	Flat *Flat `json:"flat" gogm:"direction=outgoing;relationship=has_flat"`
	// An As-is element indicates that the controls should be structured in resolution as they are structured in their source catalogs. It does not contain any elements or attributes.
	AsIs bool `json:"as-is" gogm:"name=as-is"`
	// A Custom element frames a structure for embedding represented controls in resolution.
	Custom *Customgrouping `json:"custom" gogm:"direction=outgoing;relationship=has_custom"`
	// A Combine element defines whether and how to combine multiple (competing) versions of the same control
	Combine *Combinationrule `json:"combine" gogm:"direction=outgoing;relationship=has_combine"`

	//Parent property relationships
	ParentProfileProfile *ProfileProfile `json:"-" gogm:"direction=incoming;relationship=has_merge"`
}

// A partition of a control's definition or a child of another part.
type CatalogCommonPart struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A textual label that uniquely identifies the part's semantic type.
	Name string `json:"name" gogm:"name=name"`
	// A textual label that provides a sub-type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.
	Class string `json:"class" gogm:"name=class"`
	// A name given to the part, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	// Permits multiple paragraphs, lists, tables etc.
	Prose string `json:"prose" gogm:"name=prose"`
	Parts []*CatalogCommonPart `json:"parts" gogm:"direction=outgoing;relationship=has_parts"`
	// A human-oriented, locally unique identifier with cross-instance scope that can be used to reference this defined part elsewhere in this or other OSCAL instances. When referenced from another OSCAL instance, this identifier must be referenced in the context of the containing resource (e.g., import-profile). This id should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Id string `json:"id" gogm:"name=id"`
	// A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.
	Ns string `json:"ns" gogm:"name=ns"`

	//Parent property relationships
	ParentCatalogCommonPart *CatalogCommonPart `json:"-" gogm:"direction=incoming;relationship=has_parts"`
	ParentProfileAdd *ProfileAdd `json:"-" gogm:"direction=incoming;relationship=has_parts"`
	ParentProfileGroup *ProfileGroup `json:"-" gogm:"direction=incoming;relationship=has_parts"`
	ParentCatalogGroup *CatalogGroup `json:"-" gogm:"direction=incoming;relationship=has_parts"`
	ParentCatalogControl *CatalogControl `json:"-" gogm:"direction=incoming;relationship=has_parts"`
	ParentAssessmentCommonLocalObjective *AssessmentCommonLocalObjective `json:"-" gogm:"direction=incoming;relationship=has_parts"`
}

// A set of information type identifiers qualified by the given identification system used, such as NIST SP 800-60.
type InformationTypeCategorization struct {
	gogm.BaseNode
	// Specifies the information type identification system used.
	System string `json:"system" gogm:"name=system"`
	InformationTypeIds []string `json:"information-type-ids" gogm:"name=information-type-ids"`

	//Parent property relationships
	ParentInformationType *InformationType `json:"-" gogm:"direction=incoming;relationship=has_categorizations"`
}

// Provides information as to how the system is implemented.
type SspSystemImplementation struct {
	gogm.BaseNode
	Users []*ImplementationCommonSystemUser `json:"users" gogm:"direction=outgoing;relationship=has_users"`
	Components []*ImplementationCommonSystemComponent `json:"components" gogm:"direction=outgoing;relationship=has_components"`
	InventoryItems []*ImplementationCommonInventoryItem `json:"inventory-items" gogm:"direction=outgoing;relationship=has_inventory-items"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	LeveragedAuthorizations []*LeveragedAuthorization `json:"leveraged-authorizations" gogm:"direction=outgoing;relationship=has_leveraged-authorizations"`

	//Parent property relationships
	ParentSspSystemSecurityPlan *SspSystemSecurityPlan `json:"-" gogm:"direction=incoming;relationship=has_system-implementation"`
}

// An assessment plan, such as those provided by a FedRAMP assessor.
type ApAssessmentPlan struct {
	gogm.BaseNode
	// Identifies the controls being assessed and their control objectives.
	ReviewedControls *AssessmentCommonReviewedControls `json:"reviewed-controls" gogm:"direction=outgoing;relationship=has_reviewed-controls"`
	Tasks []*AssessmentCommonTask `json:"tasks" gogm:"direction=outgoing;relationship=has_tasks"`
	// A collection of resources, which may be included directly or by reference.
	BackMatter *MetadataBackMatter `json:"back-matter" gogm:"direction=outgoing;relationship=has_back-matter"`
	// Used by the assessment plan and POA&M to import information about the system.
	ImportSsp *AssessmentCommonImportSsp `json:"import-ssp" gogm:"direction=outgoing;relationship=has_import-ssp"`
	// Used to define various terms and conditions under which an assessment, described by the plan, can be performed. Each child part defines a different type of term or condition.
	TermsAndConditions *AssessmentPlanTermsandConditions `json:"terms-and-conditions" gogm:"direction=outgoing;relationship=has_terms-and-conditions"`
	// Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.
	LocalDefinitions *LocalDefinitions `json:"local-definitions" gogm:"direction=outgoing;relationship=has_local-definitions"`
	AssessmentSubjects []*AssessmentCommonAssessmentSubject `json:"assessment-subjects" gogm:"direction=outgoing;relationship=has_assessment-subjects"`
	// Identifies the assets used to perform this assessment, such as the assessment team, scanning tools, and assumptions.
	AssessmentAssets *AssessmentCommonAssessmentAssets `json:"assessment-assets" gogm:"direction=outgoing;relationship=has_assessment-assets"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this assessment plan in this or other OSCAL instances. The locally defined UUID of the assessment plan can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// Provides information about the publication and availability of the containing document.
	Metadata *MetadataMetadata `json:"metadata" gogm:"direction=outgoing;relationship=has_metadata"`
}

// A plan of action and milestones which identifies initial and residual risks, deviations, and disposition, such as those required by FedRAMP.
type PoamPlanOfActionAndMilestones struct {
	gogm.BaseNode
	// Provides information about the publication and availability of the containing document.
	Metadata *MetadataMetadata `json:"metadata" gogm:"direction=outgoing;relationship=has_metadata"`
	// A human-oriented, globally unique identifier with cross-instance scope that can be used to reference this system identification property elsewhere in this or other OSCAL instances. When referencing an externally defined system identification, the system identification must be used in the context of the external / imported OSCAL instance (e.g., uri-reference). This string should be assigned per-subject, which means it should be consistently used to identify the same system across revisions of the document.
	SystemId *ImplementationCommonSystemId `json:"system-id" gogm:"direction=outgoing;relationship=has_system-id"`
	// Allows components, and inventory-items to be defined within the POA&M for circumstances where no OSCAL-based SSP exists, or is not delivered with the POA&M.
	LocalDefinitions *PoamLocalDefinitions `json:"local-definitions" gogm:"direction=outgoing;relationship=has_local-definitions"`
	PoamItems []*PoamPoamItem `json:"poam-items" gogm:"direction=outgoing;relationship=has_poam-items"`
	// A machine-oriented, globally unique identifier with instancescope that can be used to reference this POA&M instance in this OSCAL instance. This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// Used by the assessment plan and POA&M to import information about the system.
	ImportSsp *AssessmentCommonImportSsp `json:"import-ssp" gogm:"direction=outgoing;relationship=has_import-ssp"`
	Observations []*AssessmentCommonObservation `json:"observations" gogm:"direction=outgoing;relationship=has_observations"`
	Risks []*AssessmentCommonRisk `json:"risks" gogm:"direction=outgoing;relationship=has_risks"`
	// A collection of resources, which may be included directly or by reference.
	BackMatter *MetadataBackMatter `json:"back-matter" gogm:"direction=outgoing;relationship=has_back-matter"`
}

// A graphic that provides a visual representation the system, or some aspect of it.
type SspDiagram struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A brief caption to annotate the diagram.
	Caption string `json:"caption" gogm:"name=caption"`
	// Commentary about the diagram that enhances it.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this diagram elsewhere in this or other OSCAL instances. The locally defined UUID of the diagram can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A summary of the diagram.
	Description string `json:"description" gogm:"name=description"`

	//Parent property relationships
	ParentSspDataFlow *SspDataFlow `json:"-" gogm:"direction=incoming;relationship=has_diagrams"`
	ParentSspAuthorizationBoundary *SspAuthorizationBoundary `json:"-" gogm:"direction=incoming;relationship=has_diagrams"`
	ParentSspNetworkArchitecture *SspNetworkArchitecture `json:"-" gogm:"direction=incoming;relationship=has_diagrams"`
}

// A local definition of a control objective. Uses catalog syntax for control objective and assessment activities.
type AssessmentCommonAssessmentMethod struct {
	gogm.BaseNode
	// A partition of an assessment plan or results or a child of another part.
	Part *AssessmentCommonAssessmentPart `json:"part" gogm:"direction=outgoing;relationship=has_part"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this assessment method elsewhere in this or other OSCAL instances. The locally defined UUID of the assessment method can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A human-readable description of this assessment method.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
}

// A reference to a local or remote resource
type MetadataLink struct {
	gogm.BaseNode
	// A resolvable URL reference to a resource.
	Href string `json:"href" gogm:"name=href"`
	// Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.
	Rel string `json:"rel" gogm:"name=rel"`
	// Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
	MediaType string `json:"media-type" gogm:"name=media-type"`
	// A textual label to associate with the link, which may be used for presentation in a tool.
	Text string `json:"text" gogm:"name=text"`

	//Parent property relationships
	ParentAssessmentCommonRelatedTask *AssessmentCommonRelatedTask `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentMetadataLocation *MetadataLocation `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonRisk *AssessmentCommonRisk `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentProfileAdd *ProfileAdd `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentInheritedControlImplementation *InheritedControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonReviewedControls *AssessmentCommonReviewedControls `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentCatalogGroup *CatalogGroup `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentUsesComponent *UsesComponent `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentSspSystemCharacteristics *SspSystemCharacteristics `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentIntegrityImpactLevel *IntegrityImpactLevel `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentRiskResponseReference *RiskResponseReference `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentProvidedControlImplementation *ProvidedControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonAssessmentSubject *AssessmentCommonAssessmentSubject `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentComponentDefinitionStatement *ComponentDefinitionStatement `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessedControls *AssessedControls `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonSubjectReference *AssessmentCommonSubjectReference `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentMitigatingFactor *MitigatingFactor `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAvailabilityImpactLevel *AvailabilityImpactLevel `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentMetadataResponsibleParty *MetadataResponsibleParty `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonAssessmentSubjectPlaceholder *AssessmentCommonAssessmentSubjectPlaceholder `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentSspNetworkArchitecture *SspNetworkArchitecture `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentImplementationCommonSystemComponent *ImplementationCommonSystemComponent `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentFacet *Facet `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentMetadataRole *MetadataRole `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentMetadataRevision *MetadataRevision `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonAssessmentMethod *AssessmentCommonAssessmentMethod `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentLogEntry *AssessmentLogEntry `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonTask *AssessmentCommonTask `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentSspSystemInformation *SspSystemInformation `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentImplementedComponent *ImplementedComponent `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentSspImplementedRequirement *SspImplementedRequirement `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentConfidentialityImpactLevel *ConfidentialityImpactLevel `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentSspByComponent *SspByComponent `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentRequiredAsset *RequiredAsset `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentSspAuthorizationBoundary *SspAuthorizationBoundary `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentSspDataFlow *SspDataFlow `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentSspDiagram *SspDiagram `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentProfileGroup *ProfileGroup `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonResponse *AssessmentCommonResponse `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentArFinding *ArFinding `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentSspSystemImplementation *SspSystemImplementation `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentPoamPoamItem *PoamPoamItem `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentReferencedControlObjectives *ReferencedControlObjectives `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonFindingTarget *AssessmentCommonFindingTarget `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentSspStatement *SspStatement `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentExport *Export `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonCharacterization *AssessmentCommonCharacterization `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentComponentDefinitionControlImplementation *ComponentDefinitionControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentCitation *Citation `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentStep *Step `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentCatalogCommonPart *CatalogCommonPart `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonSelectSubjectById *AssessmentCommonSelectSubjectById `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentRiskLogEntry *RiskLogEntry `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonActivity *AssessmentCommonActivity `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentLeveragedAuthorization *LeveragedAuthorization `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentComponentDefinitionImplementedRequirement *ComponentDefinitionImplementedRequirement `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentParameterSetting *ParameterSetting `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentControlImplementationResponsibility *ControlImplementationResponsibility `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentSatisfiedControlImplementationResponsibility *SatisfiedControlImplementationResponsibility `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentMetadataParty *MetadataParty `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonObservation *AssessmentCommonObservation `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentRelevantEvidence *RelevantEvidence `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentInformationType *InformationType `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentMetadataResponsibleRole *MetadataResponsibleRole `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonOriginActor *AssessmentCommonOriginActor `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentArResult *ArResult `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonLocalObjective *AssessmentCommonLocalObjective `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentImplementationCommonSystemUser *ImplementationCommonSystemUser `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentImplementationCommonInventoryItem *ImplementationCommonInventoryItem `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentCommonAssessmentPart *AssessmentCommonAssessmentPart `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentMetadataMetadata *MetadataMetadata `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssociatedActivity *AssociatedActivity `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentCatalogCommonParameter *CatalogCommonParameter `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentComponentDefinitionCapability *ComponentDefinitionCapability `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentCatalogControl *CatalogControl `json:"-" gogm:"direction=incoming;relationship=has_links"`
	ParentAssessmentPlatform *AssessmentPlatform `json:"-" gogm:"direction=incoming;relationship=has_links"`
}

// A set of textual statements, typically written by the assessor.
type AttestationStatements struct {
	gogm.BaseNode
	ResponsibleParties []*MetadataResponsibleParty `json:"responsible-parties" gogm:"direction=outgoing;relationship=has_responsible-parties"`
	Parts []*AssessmentCommonAssessmentPart `json:"parts" gogm:"direction=outgoing;relationship=has_parts"`

	//Parent property relationships
	ParentArResult *ArResult `json:"-" gogm:"direction=incoming;relationship=has_attestations"`
}

// A local definition of a control objective for this assessment. Uses catalog syntax for control objective and assessment actions.
type AssessmentCommonLocalObjective struct {
	gogm.BaseNode
	Parts []*CatalogCommonPart `json:"parts" gogm:"direction=outgoing;relationship=has_parts"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A human-oriented identifier reference to a control with a corresponding id value. When referencing an externally defined control, the Control Identifier Reference must be used in the context of the external / imported OSCAL instance (e.g., uri-reference).
	ControlId string `json:"control-id" gogm:"name=control-id"`
	// A human-readable description of this control objective.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
}

// Identifies an individual task for which the containing object is a consequence of.
type AssessmentCommonRelatedTask struct {
	gogm.BaseNode
	// A machine-oriented identifier reference to a unique task.
	TaskUuid string `json:"task-uuid" gogm:"name=task-uuid"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	ResponsibleParties []*MetadataResponsibleParty `json:"responsible-parties" gogm:"direction=outgoing;relationship=has_responsible-parties"`
	Subjects []*AssessmentCommonAssessmentSubject `json:"subjects" gogm:"direction=outgoing;relationship=has_subjects"`
	// Used to detail assessment subjects that were identfied by this task.
	IdentifiedSubject *IdentifiedSubject `json:"identified-subject" gogm:"direction=outgoing;relationship=has_identified-subject"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentAssessmentLogEntry *AssessmentLogEntry `json:"-" gogm:"direction=incoming;relationship=has_related-tasks"`
	ParentRiskResponseReference *RiskResponseReference `json:"-" gogm:"direction=incoming;relationship=has_related-tasks"`
	ParentAssessmentCommonOrigin *AssessmentCommonOrigin `json:"-" gogm:"direction=incoming;relationship=has_related-tasks"`
}

// A test expression which is expected to be evaluated by a tool.
type ConstraintTest struct {
	gogm.BaseNode
	// A formal (executable) expression of a constraint
	Expression string `json:"expression" gogm:"name=expression"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentCatalogCommonParameterConstraint *CatalogCommonParameterConstraint `json:"-" gogm:"direction=incoming;relationship=has_tests"`
}

// A single managed inventory item within the system.
type ImplementationCommonInventoryItem struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	ResponsibleParties []*MetadataResponsibleParty `json:"responsible-parties" gogm:"direction=outgoing;relationship=has_responsible-parties"`
	ImplementedComponents []*ImplementedComponent `json:"implemented-components" gogm:"direction=outgoing;relationship=has_implemented-components"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this inventory item elsewhere in this or other OSCAL instances. The locally defined UUID of the inventory item can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A summary of the inventory item stating its purpose within the system.
	Description string `json:"description" gogm:"name=description"`

	//Parent property relationships
	ParentSspSystemImplementation *SspSystemImplementation `json:"-" gogm:"direction=incoming;relationship=has_inventory-items"`
	ParentLocalDefinitions *LocalDefinitions `json:"-" gogm:"direction=incoming;relationship=has_inventory-items"`
	ParentPoamLocalDefinitions *PoamLocalDefinitions `json:"-" gogm:"direction=incoming;relationship=has_inventory-items"`
}

// The task is intended to occur within the specified date range.
type OnDateRangeCondition struct {
	gogm.BaseNode
	// The task must occur on or after the specified date.
	Start string `json:"start" gogm:"name=start"`
	// The task must occur on or before the specified date.
	End string `json:"end" gogm:"name=end"`

	//Parent property relationships
	ParentEventTiming *EventTiming `json:"-" gogm:"direction=incoming;relationship=has_within-date-range"`
}

// An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair. The value of a property is a simple scalar value, which may be expressed as a list of values.
type MetadataProperty struct {
	gogm.BaseNode
	// A textual label that provides a sub-type or characterization of the property's name. This can be used to further distinguish or discriminate between the semantics of multiple properties of the same object with the same name and ns.
	Class string `json:"class" gogm:"name=class"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A textual label that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.
	Name string `json:"name" gogm:"name=name"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this defined property elsewhere in this or other OSCAL instances. This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.
	Ns string `json:"ns" gogm:"name=ns"`
	// Indicates the value of the attribute, characteristic, or quality.
	Value string `json:"value" gogm:"name=value"`

	//Parent property relationships
	ParentSspDataFlow *SspDataFlow `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentMetadataRevision *MetadataRevision `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentArResult *ArResult `json:"-" gogm:"direction=incoming;relationship=has_prop"`
	ParentRequiredAsset *RequiredAsset `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentSspDiagram *SspDiagram `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentImplementationCommonSystemUser *ImplementationCommonSystemUser `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentFacet *Facet `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentProfileGroup *ProfileGroup `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessedControls *AssessedControls `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentParameterSetting *ParameterSetting `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentInformationType *InformationType `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentControlImplementationResponsibility *ControlImplementationResponsibility `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentMetadataMetadata *MetadataMetadata `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssociatedActivity *AssociatedActivity `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonFindingTarget *AssessmentCommonFindingTarget `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAvailabilityImpactLevel *AvailabilityImpactLevel `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentComponentDefinitionImplementedRequirement *ComponentDefinitionImplementedRequirement `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonResponse *AssessmentCommonResponse `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonActivity *AssessmentCommonActivity `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentConfidentialityImpactLevel *ConfidentialityImpactLevel `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonCharacterization *AssessmentCommonCharacterization `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonOriginActor *AssessmentCommonOriginActor `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonSelectSubjectById *AssessmentCommonSelectSubjectById `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonSubjectReference *AssessmentCommonSubjectReference `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentCatalogCommonPart *CatalogCommonPart `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonRelatedTask *AssessmentCommonRelatedTask `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonAssessmentPart *AssessmentCommonAssessmentPart `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentStep *Step `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentSspSystemCharacteristics *SspSystemCharacteristics `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentImplementedComponent *ImplementedComponent `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentLeveragedAuthorization *LeveragedAuthorization `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentSspByComponent *SspByComponent `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonReviewedControls *AssessmentCommonReviewedControls `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentRiskResponseReference *RiskResponseReference `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentMitigatingFactor *MitigatingFactor `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentSspNetworkArchitecture *SspNetworkArchitecture `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentImplementationCommonInventoryItem *ImplementationCommonInventoryItem `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentMetadataResponsibleParty *MetadataResponsibleParty `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentInheritedControlImplementation *InheritedControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentResource *Resource `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentMetadataParty *MetadataParty `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonAssessmentSubjectPlaceholder *AssessmentCommonAssessmentSubjectPlaceholder `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentSspImplementedRequirement *SspImplementedRequirement `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentCatalogGroup *CatalogGroup `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentLogEntry *AssessmentLogEntry `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonTask *AssessmentCommonTask `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentArFinding *ArFinding `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentPlatform *AssessmentPlatform `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentComponentDefinitionStatement *ComponentDefinitionStatement `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentComponentDefinitionCapability *ComponentDefinitionCapability `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentMetadataRole *MetadataRole `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonAssessmentMethod *AssessmentCommonAssessmentMethod `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonLocalObjective *AssessmentCommonLocalObjective `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentSspSystemImplementation *SspSystemImplementation `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentRelevantEvidence *RelevantEvidence `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentSspAuthorizationBoundary *SspAuthorizationBoundary `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentMetadataResponsibleRole *MetadataResponsibleRole `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentComponentDefinitionControlImplementation *ComponentDefinitionControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonObservation *AssessmentCommonObservation `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentCatalogControl *CatalogControl `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentUsesComponent *UsesComponent `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentSspSystemInformation *SspSystemInformation `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentExport *Export `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentSatisfiedControlImplementationResponsibility *SatisfiedControlImplementationResponsibility `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentRiskLogEntry *RiskLogEntry `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonRisk *AssessmentCommonRisk `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentImplementationCommonSystemComponent *ImplementationCommonSystemComponent `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentMetadataLocation *MetadataLocation `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentIntegrityImpactLevel *IntegrityImpactLevel `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentAssessmentCommonAssessmentSubject *AssessmentCommonAssessmentSubject `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentPoamPoamItem *PoamPoamItem `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentSspStatement *SspStatement `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentCatalogCommonParameter *CatalogCommonParameter `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentProfileAdd *ProfileAdd `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentProvidedControlImplementation *ProvidedControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentCitation *Citation `json:"-" gogm:"direction=incoming;relationship=has_props"`
	ParentReferencedControlObjectives *ReferencedControlObjectives `json:"-" gogm:"direction=incoming;relationship=has_props"`
}

// Parameters provide a mechanism for the dynamic assignment of value(s) in a control.
type CatalogCommonParameter struct {
	gogm.BaseNode
	Values []string `json:"values" gogm:"name=values"`
	// A human-oriented, locally unique identifier with cross-instance scope that can be used to reference this defined parameter elsewhere in this or other OSCAL instances. When referenced from another OSCAL instance, this identifier must be referenced in the context of the containing resource (e.g., import-profile). This id should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Id string `json:"id" gogm:"name=id"`
	// A textual label that provides a characterization of the parameter.
	Class string `json:"class" gogm:"name=class"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Constraints []*CatalogCommonParameterConstraint `json:"constraints" gogm:"direction=outgoing;relationship=has_constraints"`
	Guidelines []*CatalogCommonParameterGuideline `json:"guidelines" gogm:"direction=outgoing;relationship=has_guidelines"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// **(deprecated)** Another parameter invoking this one. This construct has been deprecated and should not be used.
	DependsOn string `json:"depends-on" gogm:"name=depends-on"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.
	Label string `json:"label" gogm:"name=label"`
	// Describes the purpose and use of a parameter
	Usage string `json:"usage" gogm:"name=usage"`
	// Presenting a choice among alternatives
	Select *CatalogCommonParameterSelection `json:"select" gogm:"direction=outgoing;relationship=has_select"`

	//Parent property relationships
	ParentProfileAdd *ProfileAdd `json:"-" gogm:"direction=incoming;relationship=has_params"`
	ParentProfileGroup *ProfileGroup `json:"-" gogm:"direction=incoming;relationship=has_params"`
	ParentCatalogGroup *CatalogGroup `json:"-" gogm:"direction=incoming;relationship=has_params"`
	ParentCatalogControl *CatalogControl `json:"-" gogm:"direction=incoming;relationship=has_params"`
	ParentCatalogCatalog *CatalogCatalog `json:"-" gogm:"direction=incoming;relationship=has_params"`
}

// A determination of if the objective is satisfied or not within a given system.
type ObjectiveStatus struct {
	gogm.BaseNode
	// An indication as to whether the objective is satisfied or not.
	State string `json:"state" gogm:"name=state"`
	// The reason the objective was given it's status.
	Reason string `json:"reason" gogm:"name=reason"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentAssessmentCommonFindingTarget *AssessmentCommonFindingTarget `json:"-" gogm:"direction=incoming;relationship=has_status"`
}

// A description of the system's network architecture, optionally supplemented by diagrams that illustrate the network architecture.
type SspNetworkArchitecture struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Diagrams []*SspDiagram `json:"diagrams" gogm:"direction=outgoing;relationship=has_diagrams"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A summary of the system's network architecture.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentSspSystemCharacteristics *SspSystemCharacteristics `json:"-" gogm:"direction=incoming;relationship=has_network-architecture"`
}

// Describes a control implementation inherited by a leveraging system.
type InheritedControlImplementation struct {
	gogm.BaseNode
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this inherited entry elsewhere in this or other OSCAL instances. The locally defined UUID of the inherited control implementation can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A machine-oriented identifier reference to an inherited control implementation that a leveraging system is inheriting from a leveraged system.
	ProvidedUuid string `json:"provided-uuid" gogm:"name=provided-uuid"`
	// An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is inheriting from a leveraged system.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`

	//Parent property relationships
	ParentSspByComponent *SspByComponent `json:"-" gogm:"direction=incoming;relationship=has_inherited"`
}

// Identifies which statements within a control are addressed.
type SspStatement struct {
	gogm.BaseNode
	// A human-oriented identifier reference to a control statement.
	StatementId string `json:"statement-id" gogm:"name=statement-id"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this control statement elsewhere in this or other OSCAL instances. The UUID of the control statement in the source OSCAL instance is sufficient to reference the data item locally or globally (e.g., in an imported OSCAL instance).
	Uuid string `json:"uuid" gogm:"name=uuid"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	ByComponents []*SspByComponent `json:"by-components" gogm:"direction=outgoing;relationship=has_by-components"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentSspImplementedRequirement *SspImplementedRequirement `json:"-" gogm:"direction=incoming;relationship=has_statements"`
}

// Describes how the system satisfies a set of controls.
type SspControlImplementation struct {
	gogm.BaseNode
	// A statement describing important things to know about how this set of control satisfaction documentation is approached.
	Description string `json:"description" gogm:"name=description"`
	SetParameters []*ImplementationCommonSetParameter `json:"set-parameters" gogm:"direction=outgoing;relationship=has_set-parameters"`
	ImplementedRequirements []*SspImplementedRequirement `json:"implemented-requirements" gogm:"direction=outgoing;relationship=has_implemented-requirements"`

	//Parent property relationships
	ParentSspSystemSecurityPlan *SspSystemSecurityPlan `json:"-" gogm:"direction=incoming;relationship=has_control-implementation"`
}

// Identifies an individual risk response that this log entry is for.
type RiskResponseReference struct {
	gogm.BaseNode
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented identifier reference to a unique risk response.
	ResponseUuid string `json:"response-uuid" gogm:"name=response-uuid"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	RelatedTasks []*AssessmentCommonRelatedTask `json:"related-tasks" gogm:"direction=outgoing;relationship=has_related-tasks"`

	//Parent property relationships
	ParentRiskLogEntry *RiskLogEntry `json:"-" gogm:"direction=incoming;relationship=has_related-responses"`
}

// Used to import the OSCAL profile representing the system's control baseline.
type SspImportProfile struct {
	gogm.BaseNode
	// A resolvable URL reference to the profile to use as the system's control baseline.
	Href string `json:"href" gogm:"name=href"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentSspSystemSecurityPlan *SspSystemSecurityPlan `json:"-" gogm:"direction=incoming;relationship=has_import-profile"`
}

// A prose statement that provides a recommendation for the use of a parameter.
type CatalogCommonParameterGuideline struct {
	gogm.BaseNode
	// Prose permits multiple paragraphs, lists, tables etc.
	Prose string `json:"prose" gogm:"name=prose"`

	//Parent property relationships
	ParentCatalogCommonParameter *CatalogCommonParameter `json:"-" gogm:"direction=incoming;relationship=has_guidelines"`
	ParentParameterSetting *ParameterSetting `json:"-" gogm:"direction=incoming;relationship=has_guidelines"`
}

// A type of user that interacts with the system based on an associated role.
type ImplementationCommonSystemUser struct {
	gogm.BaseNode
	// A summary of the user's purpose within the system.
	Description string `json:"description" gogm:"name=description"`
	RoleIds []string `json:"role-ids" gogm:"name=role-ids"`
	AuthorizedPrivileges []*ImplementationCommonAuthorizedPrivilege `json:"authorized-privileges" gogm:"direction=outgoing;relationship=has_authorized-privileges"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A name given to the user, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	// A short common name, abbreviation, or acronym for the user.
	ShortName string `json:"short-name" gogm:"name=short-name"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this user class elsewhere in this or other OSCAL instances. The locally defined UUID of the system user can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentSspSystemImplementation *SspSystemImplementation `json:"-" gogm:"direction=incoming;relationship=has_users"`
	ParentLocalDefinitions *LocalDefinitions `json:"-" gogm:"direction=incoming;relationship=has_users"`
}

// The set of components that are implemented in a given system inventory item.
type ImplementedComponent struct {
	gogm.BaseNode
	// A machine-oriented identifier reference to a component that is implemented as part of an inventory item.
	ComponentUuid string `json:"component-uuid" gogm:"name=component-uuid"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	ResponsibleParties []*MetadataResponsibleParty `json:"responsible-parties" gogm:"direction=outgoing;relationship=has_responsible-parties"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`

	//Parent property relationships
	ParentImplementationCommonInventoryItem *ImplementationCommonInventoryItem `json:"-" gogm:"direction=incoming;relationship=has_implemented-components"`
}

// Identifies system elements being assessed, such as components, inventory items, and locations. In the assessment plan, this identifies a planned assessment subject. In the assessment results this is an actual assessment subject, and reflects any changes from the plan. exactly what will be the focus of this assessment. Any subjects not identified in this way are out-of-scope.
type AssessmentCommonAssessmentSubject struct {
	gogm.BaseNode
	// A human-readable description of the collection of subjects being included in this assessment.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A key word to indicate all.
	IncludeAll *All `json:"include-all" gogm:"direction=outgoing;relationship=has_include-all"`
	IncludeSubjects []*AssessmentCommonSelectSubjectById `json:"include-subjects" gogm:"direction=outgoing;relationship=has_include-subjects"`
	ExcludeSubjects []*AssessmentCommonSelectSubjectById `json:"exclude-subjects" gogm:"direction=outgoing;relationship=has_exclude-subjects"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// Indicates the type of assessment subject, such as a component, inventory, item, location, or party represented by this selection statement.
	Type string `json:"type" gogm:"name=type"`

	//Parent property relationships
	ParentAssessmentCommonRelatedTask *AssessmentCommonRelatedTask `json:"-" gogm:"direction=incoming;relationship=has_subjects"`
	ParentIdentifiedSubject *IdentifiedSubject `json:"-" gogm:"direction=incoming;relationship=has_subjects"`
	ParentAssociatedActivity *AssociatedActivity `json:"-" gogm:"direction=incoming;relationship=has_subjects"`
	ParentAssessmentCommonTask *AssessmentCommonTask `json:"-" gogm:"direction=incoming;relationship=has_subjects"`
	ParentApAssessmentPlan *ApAssessmentPlan `json:"-" gogm:"direction=incoming;relationship=has_assessment-subjects"`
}

// Identifies which statements within a control are addressed.
type ComponentDefinitionStatement struct {
	gogm.BaseNode
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A human-oriented identifier reference to a control statement.
	StatementId string `json:"statement-id" gogm:"name=statement-id"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this control statement elsewhere in this or other OSCAL instances. The UUID of the control statement in the source OSCAL instance is sufficient to reference the data item locally or globally (e.g., in an imported OSCAL instance).
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A summary of how the containing control statement is implemented by the component or capability.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`

	//Parent property relationships
	ParentComponentDefinitionImplementedRequirement *ComponentDefinitionImplementedRequirement `json:"-" gogm:"direction=incoming;relationship=has_statements"`
}

// A citation consisting of end note text and optional structured bibliographic data.
type Citation struct {
	gogm.BaseNode
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A line of citation text.
	Text string `json:"text" gogm:"name=text"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`

	//Parent property relationships
	ParentResource *Resource `json:"-" gogm:"direction=incoming;relationship=has_citation"`
}

// Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.
type LocalDefinitions struct {
	gogm.BaseNode
	InventoryItems []*ImplementationCommonInventoryItem `json:"inventory-items" gogm:"direction=outgoing;relationship=has_inventory-items"`
	Users []*ImplementationCommonSystemUser `json:"users" gogm:"direction=outgoing;relationship=has_users"`
	// Identifies the assets used to perform this assessment, such as the assessment team, scanning tools, and assumptions.
	AssessmentAssets *AssessmentCommonAssessmentAssets `json:"assessment-assets" gogm:"direction=outgoing;relationship=has_assessment-assets"`
	Tasks []*AssessmentCommonTask `json:"tasks" gogm:"direction=outgoing;relationship=has_tasks"`
	Components []*ImplementationCommonSystemComponent `json:"components" gogm:"direction=outgoing;relationship=has_components"`

	//Parent property relationships
	ParentArAssessmentResults *ArAssessmentResults `json:"-" gogm:"direction=incoming;relationship=has_local-definitions"`
	ParentArResult *ArResult `json:"-" gogm:"direction=incoming;relationship=has_local-definitions"`
	ParentApAssessmentPlan *ApAssessmentPlan `json:"-" gogm:"direction=incoming;relationship=has_local-definitions"`
}

// Identifies content intended for external consumption, such as with leveraged organizations.
type Export struct {
	gogm.BaseNode
	Provided []*ProvidedControlImplementation `json:"provided" gogm:"direction=outgoing;relationship=has_provided"`
	Responsibilities []*ControlImplementationResponsibility `json:"responsibilities" gogm:"direction=outgoing;relationship=has_responsibilities"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// An implementation statement that describes the aspects of the control or control statement implementation that can be available to another system leveraging this system.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`

	//Parent property relationships
	ParentSspByComponent *SspByComponent `json:"-" gogm:"direction=incoming;relationship=has_export"`
}

// Describes how the containing component or capability implements an individual control.
type ComponentDefinitionImplementedRequirement struct {
	gogm.BaseNode
	// A human-oriented identifier reference to a control with a corresponding id value. When referencing an externally defined control, the Control Identifier Reference must be used in the context of the external / imported OSCAL instance (e.g., uri-reference).
	ControlId string `json:"control-id" gogm:"name=control-id"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference a specific control implementation elsewhere in this or other OSCAL instances. The locally defined UUID of the control implementation can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance).This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A description of how the specified control is implemented for the containing component or capability.
	Description string `json:"description" gogm:"name=description"`
	SetParameters []*ImplementationCommonSetParameter `json:"set-parameters" gogm:"direction=outgoing;relationship=has_set-parameters"`
	ResponsibleRoles []*MetadataResponsibleRole `json:"responsible-roles" gogm:"direction=outgoing;relationship=has_responsible-roles"`
	Statements []*ComponentDefinitionStatement `json:"statements" gogm:"direction=outgoing;relationship=has_statements"`

	//Parent property relationships
	ParentComponentDefinitionControlImplementation *ComponentDefinitionControlImplementation `json:"-" gogm:"direction=incoming;relationship=has_implemented-requirements"`
}

// Relates the finding to a set of referenced observations that were used to determine the finding.
type RelatedObservation struct {
	gogm.BaseNode
	// A machine-oriented identifier reference to an observation defined in the list of observations.
	ObservationUuid string `json:"observation-uuid" gogm:"name=observation-uuid"`

	//Parent property relationships
	ParentPoamPoamItem *PoamPoamItem `json:"-" gogm:"direction=incoming;relationship=has_related-observations"`
	ParentAssessmentCommonRisk *AssessmentCommonRisk `json:"-" gogm:"direction=incoming;relationship=has_related-observations"`
	ParentArFinding *ArFinding `json:"-" gogm:"direction=incoming;relationship=has_related-observations"`
}

// An identifier for a person or organization using a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID)
type PartyExternalIdentifier struct {
	gogm.BaseNode
	// Indicates the type of external identifier.
	Scheme string `json:"scheme" gogm:"name=scheme"`
	Id string `json:"id" gogm:"name=id"`

	//Parent property relationships
	ParentMetadataParty *MetadataParty `json:"-" gogm:"direction=incoming;relationship=has_external-ids"`
}

// The task is intended to occur on the specified date.
type OnDateCondition struct {
	gogm.BaseNode
	// The task must occur on the specified date.
	Date string `json:"date" gogm:"name=date"`

	//Parent property relationships
	ParentEventTiming *EventTiming `json:"-" gogm:"direction=incoming;relationship=has_on-date"`
}

// Used to define various terms and conditions under which an assessment, described by the plan, can be performed. Each child part defines a different type of term or condition.
type AssessmentPlanTermsandConditions struct {
	gogm.BaseNode
	Parts []*AssessmentCommonAssessmentPart `json:"parts" gogm:"direction=outgoing;relationship=has_parts"`

	//Parent property relationships
	ParentApAssessmentPlan *ApAssessmentPlan `json:"-" gogm:"direction=incoming;relationship=has_terms-and-conditions"`
}

// The expected level of impact resulting from the unauthorized modification of the described information.
type IntegrityImpactLevel struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// The prescribed base (Confidentiality, Integrity, or Availability) security impact level.
	Base string `json:"base" gogm:"name=base"`
	// The selected (Confidentiality, Integrity, or Availability) security impact level.
	Selected string `json:"selected" gogm:"name=selected"`
	// If the selected security level is different from the base security level, this contains the justification for the change.
	AdjustmentJustification string `json:"adjustment-justification" gogm:"name=adjustment-justification"`

	//Parent property relationships
	ParentInformationType *InformationType `json:"-" gogm:"direction=incoming;relationship=has_integrity-impact"`
}

// A description of another authorized system from which this system inherits capabilities that satisfy security requirements. Another term for this concept is a common control provider.
type LeveragedAuthorization struct {
	gogm.BaseNode
	// A human readable name for the leveraged authorization in the context of the system.
	Title string `json:"title" gogm:"name=title"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// A machine-oriented identifier reference to the party that manages the leveraged system.
	PartyUuid string `json:"party-uuid" gogm:"name=party-uuid"`
	// The date the system received its authorization.
	DateAuthorized string `json:"date-authorized" gogm:"name=date-authorized"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A machine-oriented, globally unique identifier with cross-instance scope and can be used to reference this leveraged authorization elsewhere in this or other OSCAL instances. The locally defined UUID of the leveraged authorization can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`

	//Parent property relationships
	ParentSspSystemImplementation *SspSystemImplementation `json:"-" gogm:"direction=incoming;relationship=has_leveraged-authorizations"`
}

// A document identifier qualified by an identifier scheme. A document identifier provides a globally unique identifier with a cross-instance scope that is used for a group of documents that are to be treated as different versions of the same document. If this element does not appear, or if the value of this element is empty, the value of "document-id" is equal to the value of the "uuid" flag of the top-level root element.
type MetadataDocumentId struct {
	gogm.BaseNode
	// Qualifies the kind of document identifier using a URI. If the scheme is not provided the value of the element will be interpreted as a string of characters.
	Scheme string `json:"scheme" gogm:"name=scheme"`
	Identifier string `json:"identifier" gogm:"name=identifier"`

	//Parent property relationships
	ParentMetadataMetadata *MetadataMetadata `json:"-" gogm:"direction=incoming;relationship=has_document-ids"`
	ParentResource *Resource `json:"-" gogm:"direction=incoming;relationship=has_document-ids"`
}

// Defines a function assumed or expected to be assumed by a party in a specific situation.
type MetadataRole struct {
	gogm.BaseNode
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// A human-oriented, locally unique identifier with cross-instance scope that can be used to reference this defined role elsewhere in this or other OSCAL instances. When referenced from another OSCAL instance, the locally defined ID of the Role from the imported OSCAL instance must be referenced in the context of the containing resource (e.g., import, import-component-definition, import-profile, import-ssp or import-ap). This ID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Id string `json:"id" gogm:"name=id"`
	// A name given to the role, which may be used by a tool for display and navigation.
	Title string `json:"title" gogm:"name=title"`
	// A short common name, abbreviation, or acronym for the role.
	ShortName string `json:"short-name" gogm:"name=short-name"`
	// A summary of the role's purpose and associated responsibilities.
	Description string `json:"description" gogm:"name=description"`

	//Parent property relationships
	ParentMetadataMetadata *MetadataMetadata `json:"-" gogm:"direction=incoming;relationship=has_roles"`
}

// An identified risk.
type AssessmentCommonRisk struct {
	gogm.BaseNode
	// The title for this risk.
	Title string `json:"title" gogm:"name=title"`
	MitigatingFactors []*MitigatingFactor `json:"mitigating-factors" gogm:"direction=outgoing;relationship=has_mitigating-factors"`
	// A log of all risk-related tasks taken.
	RiskLog *RiskLog `json:"risk-log" gogm:"direction=outgoing;relationship=has_risk-log"`
	RelatedObservations []*RelatedObservation `json:"related-observations" gogm:"direction=outgoing;relationship=has_related-observations"`
	// An summary of impact for how the risk affects the system.
	Statement string `json:"statement" gogm:"name=statement"`
	// Describes the status of the associated risk.
	Status string `json:"status" gogm:"name=status"`
	// A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this risk elsewhere in this or other OSCAL instances. The locally defined UUID of the risk can be used to reference the data item locally or globally (e.g., in an imported OSCAL instance). This UUID should be assigned per-subject, which means it should be consistently used to identify the same subject across revisions of the document.
	Uuid string `json:"uuid" gogm:"name=uuid"`
	// A human-readable summary of the identified risk, to include a statement of how the risk impacts the system.
	Description string `json:"description" gogm:"name=description"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	Remediations []*AssessmentCommonResponse `json:"remediations" gogm:"direction=outgoing;relationship=has_remediations"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	Origins []*AssessmentCommonOrigin `json:"origins" gogm:"direction=outgoing;relationship=has_origins"`
	ThreatIds []*AssessmentCommonThreatId `json:"threat-ids" gogm:"direction=outgoing;relationship=has_threat-ids"`
	Characterizations []*AssessmentCommonCharacterization `json:"characterizations" gogm:"direction=outgoing;relationship=has_characterizations"`
	// The date/time by which the risk must be resolved.
	Deadline string `json:"deadline" gogm:"name=deadline"`

	//Parent property relationships
	ParentArResult *ArResult `json:"-" gogm:"direction=incoming;relationship=has_risks"`
	ParentPoamPlanOfActionAndMilestones *PoamPlanOfActionAndMilestones `json:"-" gogm:"direction=incoming;relationship=has_risks"`
}

// Captures an assessor's conclusions regarding the degree to which an objective is satisfied.
type AssessmentCommonFindingTarget struct {
	gogm.BaseNode
	// The title for this objective status.
	Title string `json:"title" gogm:"name=title"`
	Links []*MetadataLink `json:"links" gogm:"direction=outgoing;relationship=has_links"`
	// Indicates the degree to which the a given control is implemented.
	ImplementationStatus *ImplementationCommonImplementationStatus `json:"implementation-status" gogm:"direction=outgoing;relationship=has_implementation-status"`
	// Additional commentary on the containing object.
	Remarks string `json:"remarks" gogm:"name=remarks"`
	// Identifies the type of the target.
	Type string `json:"type" gogm:"name=type"`
	// A machine-oriented identifier reference for a specific target qualified by the type.
	TargetId string `json:"target-id" gogm:"name=target-id"`
	// A human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied.
	Description string `json:"description" gogm:"name=description"`
	Props []*MetadataProperty `json:"props" gogm:"direction=outgoing;relationship=has_props"`
	// A determination of if the objective is satisfied or not within a given system.
	Status *ObjectiveStatus `json:"status" gogm:"direction=outgoing;relationship=has_status"`

	//Parent property relationships
	ParentArFinding *ArFinding `json:"-" gogm:"direction=incoming;relationship=has_target"`
}

// A Custom element frames a structure for embedding represented controls in resolution.
type Customgrouping struct {
	gogm.BaseNode
	Groups []*ProfileGroup `json:"groups" gogm:"direction=outgoing;relationship=has_groups"`
	InsertControls []*ProfileInsertControls `json:"insert-controls" gogm:"direction=outgoing;relationship=has_insert-controls"`

	//Parent property relationships
	ParentProfileMerge *ProfileMerge `json:"-" gogm:"direction=incoming;relationship=has_custom"`
}

